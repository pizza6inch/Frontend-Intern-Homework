'use strict';

// Import required modules
var GetIntrinsic = require('get-intrinsic');
var define = require('define-data-property');
var hasDescriptors = require('has-property-descriptors')();
var gOPD = require('gopd');

// Import custom error type
var $TypeError = require('es-errors/type');

// Import Math.floor method
var $floor = GetIntrinsic('%Math.floor%');

/** @typedef {(...args: unknown[]) => unknown} Func */
// Type definition for a function with any number of arguments and any return type

/** @type {<T extends Func = Func>(fn: T, length: number, loose?: boolean) => T} */
// Function type definition for setFunctionLength with the following parameters:
// - fn: A function with any number of arguments and any return type
// - length: A number indicating the desired length of the function
// - loose?: An optional boolean indicating whether to enforce the function length or not
module.exports = function setFunctionLength(fn, length) {
	// Check if fn is a function
	if (typeof fn !== 'function') {
		throw new $TypeError('`fn` is not a function');
	}

	// Check if length is a positive 32-bit integer
	if (typeof length !== 'number') {
		throw new $TypeError('`length` must be a number');
	} else if (length < 0 || length > 0xFFFFFFFF || $floor(length) !== length) {
		throw new $TypeError('`length` must be a positive 32-bit integer');
	}

	// Get the optional loose parameter
	var loose = arguments.length > 2 && !!arguments[2];

	// Check if the length property of the function is configurable and writable
	var functionLengthIsConfigurable = true;
	var functionLengthIsWritable = true;
	if ('length' in fn && gOPD) {
		var desc = gOPD(fn, 'length');
		if (desc && !desc.configurable) {
			functionLengthIsConfigurable = false;
		}
		if (desc && !desc.writable) {
			functionLengthIsWritable = false;

