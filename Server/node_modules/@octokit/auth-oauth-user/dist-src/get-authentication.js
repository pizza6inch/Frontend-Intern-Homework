import { createOAuthDeviceAuth } from "@octokit/auth-oauth-device";
import { exchangeWebFlowCode } from "@octokit/oauth-methods";

// This async function, `getAuthentication`, takes a `state` object as an argument
// and returns an authentication object.
async function getAuthentication(state) {
  // If the 'code' property exists in the 'strategyOptions' property of the 'state' object,
  // the function calls the `exchangeWebFlowCode` method from the `@octokit/oauth-methods`
  // module to exchange the authorization code for an access token.
  if ("code" in state.strategyOptions) {
    const { authentication } = await exchangeWebFlowCode({
      clientId: state.clientId,
      clientSecret: state.clientSecret,
      clientType: state.clientType,
      onTokenCreated: state.onTokenCreated, // A callback function to be invoked when a new token is created.
      ...state.strategyOptions, // Additional options to customize the behavior of the `exchangeWebFlowCode` method.
      request: state.request // A request function to send HTTP requests.
    });

    // The function returns an authentication object with the following properties:
    // - type: The type of the authentication, set to "token".
    // - tokenType: The type of the token, set to "oauth".
    // - ...authentication: The rest of the properties from the `authentication` object
    //   returned by the `exchangeWebFlowCode` method.
    return {
      type: "token",
      tokenType: "oauth",
      ...authentication
    };
  }

  // If the 'onVerification' property exists in the 'strategyOptions' property of the 'state' object,
  // the function calls the `createOAuthDeviceAuth` method from the `@octokit/auth-oauth-device`
  // module to create an OAuth device authentication flow.
  if ("onVerification" in state.strategyOptions) {
    const deviceAuth = createOAuthDeviceAuth({
      clientType: state.clientType,
      clientId: state.clientId,
      onTokenCreated: state.onTokenCreated,
      ...state.strategyOptions,
      request: state.request
    });

    const authentication = await deviceAuth({
      type: "oauth
