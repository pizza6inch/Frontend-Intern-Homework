import { OAuthApp } from "../index.js";
import { unknownRouteResponse } from "./unknown-route-response.js";

// Main function to handle requests
async function handleRequest(app, { pathPrefix = "/api/github/oauth" }, request) {
  // Handle OPTIONS request for CORS
  if (request.method === "OPTIONS") {
    return {
      status: 200,
      headers: {
        "access-control-allow-origin": "*",
        "access-control-allow-methods": "*",
        "access-control-allow-headers": "Content-Type, User-Agent, Authorization"
      }
    };
  }

  // Process the request URL
  let { pathname } = new URL(request.url, "http://localhost");
  if (!pathname.startsWith(`${pathPrefix}/`)) {
    return void 0;
  }
  pathname = pathname.slice(pathPrefix.length + 1);

  // Define available routes
  const route = [request.method, pathname].join(" ");
  const routes = {
    getLogin: `GET login`,
    getCallback: `GET callback`,
    createToken: `POST token`,
    getToken: `GET token`,
    patchToken: `PATCH token`,
    patchRefreshToken: `PATCH refresh-token`,
    scopeToken: `POST token/scoped`,
    deleteToken: `DELETE token`,
    deleteGrant: `DELETE grant`
  };

  // Handle unknown routes
  if (!Object.values(routes).includes(route)) {
    return unknownRouteResponse(request);
  }

  // Process request JSON and query parameters
  let json;
  try {
    const text = await request.text();
    json = text ? JSON.parse(text) : {};
  } catch (error) {
    // Return error response for invalid JSON
    return {
      status: 400,
      headers: {
        "content-type": "application/json",
        "access-control-allow-origin": "*"
      },
      text: JSON.stringify({
        error: "[@octokit/oauth-app] request error"
      })
    };
  }

  // Process request query parameters
  const { searchParams } = new URL(request.url, "http://localhost");
  const query = Object.fromEntries(searchParams);

  // Process request headers
  const headers = request.headers;

  // Route handlers
  try {
    // Handle getLogin route
    if (route === routes.getLogin) {
      // Generate and redirect to GitHub OAuth authorization URL
      const { url } = app.getWebFlowAuthorizationUrl({
        state: query.state,
        scopes: query.scopes ? query.scopes.split(",") : void 0,
        allowSignup: query.allowSignup ? query.allowSignup === "true" : void 0,
        redirectUrl: query.redirectUrl
      });
      return { status: 302, headers: { location: url } };
    }

    // Handle getCallback route
    if (route === routes.getCallback) {
      // Handle errors in the callback
      if (query.error) {
        throw new Error(
          `[@octokit/oauth-app] ${query.error} ${query.error_description}`
        );
      }

      // Create a new token using the provided code
      const {
        authentication: { token: token2 }
      } = await app.createToken({
        code: query.code
      });

      // Return success page with the new token
      return {
        status: 200,
        headers: {
          "content-type": "text/html"
        },
        text: `<h1>Token created successfully</h1>

<p>Your token is: <strong>${token2}</strong>. Copy it now as it cannot be shown again.</p>`
      };
    }

    // Handle other routes here

  // Catch and handle errors
  } catch (error) {
    return {
      status: 400,
      headers: {
        "content-type": "application/json",
        "access-control-allow-origin": "*"
      },
      text: JSON.stringify({ error: error.message })
    };
  }
}

// Export the handleRequest function
export {
  handleRequest
};
