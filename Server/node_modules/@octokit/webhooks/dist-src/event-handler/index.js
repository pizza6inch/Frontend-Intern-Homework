// Import necessary functions for creating a logger, handling events, and removing listeners
import { createLogger } from "../createLogger.js";
import { 
  receiverOn as on, // Binds a receiver function to a specific event type
  receiverOnAny as onAny, // Binds a receiver function to any event type
  receiverOnError as onError // Binds a receiver function to an error event type
} from "./on.js";
import { receiverHandle as receive } from "./receive.js"; // Handles the event and its data
import { removeListener } from "./remove-listener.js"; // Removes a previously registered event listener

// The main function that creates an event handler with the given options
function createEventHandler(options) {
  // Initialize the state object with hooks and logger properties
  const state = {
    hooks: {},
    log: createLogger(options && options.log) // Create a logger if a log option is provided
  };

  // If a transform option is provided, add it to the state object
  if (options && options.transform) {
    state.transform = options.transform;
  }

  // Return an object with methods for handling events and managing listeners
  return {
    on: on.bind(null, state), // Bind a receiver function to a specific event type
    onAny: onAny.bind(null, state), // Bind a receiver function to any event type
    onError: onError.bind(null, state), // Bind a receiver function to an error event type
    removeListener: removeListener.bind(null, state), // Remove a previously registered event listener
    receive: receive.bind(null, state) // Handle the event and its data
    };
}

// Export the createEventHandler function for use in other modules
export { createEventHandler };
