/*global module, process*/
// This line indicates that the module is using the global variables module and process

var Buffer = require('safe-buffer').Buffer;
var Stream = require('stream');
var util = require('util');

function DataStream(data) {
  // Initialize the object with default values
  this.buffer = null;
  this.writable = true;
  this.readable = true;

  // Check if no input data is provided
  if (!data) {
    this.buffer = Buffer.alloc(0);
    return this;
  }

  // Check if data is a stream
  if (typeof data.pipe === 'function') {
    this.buffer = Buffer.alloc(0);
    data.pipe(this);
    return this;
  }

  // Check if data is a buffer, string or an object
  if (data.length || typeof data === 'object') {
    this.buffer = data;
    this.writable = false;

    // Emit 'end' and 'close' events after processing the data
    process.nextTick(function () {
      this.emit('end', data);
      this.readable = false;
      this.emit('close');
    }.bind(this));

    return this;
  }

  // Throw an error if the data type is unexpected
  throw new TypeError('Unexpected data type ('+ typeof data + ')');
}

// Inherit the Stream prototype
util.inherits(DataStream, Stream);

DataStream.prototype.write = function write(data) {
  // Concatenate the existing buffer with the new data and emit 'data' event
  this.buffer = Buffer.concat([this.buffer, Buffer.from(data)]);
  this.emit('data', data);
};

DataStream.prototype.end = function end(data) {
  // Write the data, emit 'end' and 'close' events, and set writable and readable properties to false
  if (data)
    this.write(data);
  this.emit('end', data);
  this.emit('
