import { request as defaultRequest } from "@octokit/request";
import { oauthRequest } from "./utils";

// exchangeDeviceCode function accepts an 'options' object and returns an access token and authentication object
async function exchangeDeviceCode(options) {
  // Initialize 'request' with the default request or the one provided in the 'options' object
  const request = options.request || /* istanbul ignore next: we always pass a custom request in tests */
  defaultRequest;

  // Call 'oauthRequest' function with required parameters and options to get access token
  const response = await oauthRequest(
    request,
    "POST /login/oauth/access_token",
    {
      // client_id and device_code are required parameters
      client_id: options.clientId,
      device_code: options.code,

      // grant_type is also a required parameter
      grant_type: "urn:ietf:params:oauth:grant-type:device_code"
    }
  );

  // Create an 'authentication' object with required properties
  const authentication = {
    clientType: options.clientType,
    clientId: options.clientId,
    token: response.data.access_token,
    scopes: response.data.scope.split(/\s+/).filter(Boolean)
  };

  // If 'clientSecret' is present in 'options', add it to the 'authentication' object
  if ("clientSecret" in options) {
    authentication.clientSecret = options.clientSecret;
  }

  // If 'clientType' is 'github-app', add 'refreshToken' and 'expiresAt' properties to the 'authentication' object
  if (options.clientType === "github-app") {
    if ("refresh_token" in response.data) {
      const apiTimeInMs = new Date(response.headers.date).getTime();
      authentication.refreshToken = response.data.refresh_token;
      authentication.expiresAt = toTimestamp(
        apiTimeInMs,
        response.data.expires_in
      );
      authentication.refreshTokenExpiresAt = toTimestamp(
        apiTimeInMs,
        response.data.refresh_token_expires_in
      );
    }

    // Remove 'scopes' property from 'authentication' object if 'clientType' is 'github-app'
    delete authentication.scopes;
  }

  // Return an object containing 'response' and 'authentication' objects
  return {
