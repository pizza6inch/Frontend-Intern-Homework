"use strict";

/**
 * Exported function for loading default values into a given object,
 * with the ability to override them with received values.
 *
 * @param {Object} received - The received data to be merged with defaults.
 * @param {Object} defaults - The default values to be merged with received data.
 * @param {Object} [onto={}] - The object to merge the data into. Defaults to an empty object.
 * @returns {Object} - The merged object.
 */
exports.load = function (received, defaults, onto = {}) {
  var k, ref, v;

  // Iterate over each key in the defaults object
  for (k in defaults) {
    v = defaults[k];
    ref = received[k];

    // If the key exists in the received object, use its value;
    // otherwise, use the default value
    onto[k] = (ref != null) ? ref : v;
  }

  // Return the merged object
  return onto;
};

/**
 * Exported function for overwriting values in a given object with received values.
 *
 * @param {Object} received - The received data to overwrite the defaults.
 * @param {Object} defaults - The default values to be potentially overwritten.
 * @param {Object} [onto={}] - The object to apply the overwriting to. Defaults to an empty object.
 * @returns {Object} - The overwritten object.
 */
exports.overwrite = function (received, defaults, onto = {}) {
  var k, v;

  // Iterate over each key in the received object
  for (k in received) {
    v = received[k];

    // If the key exists in the defaults object, use the received value;
    // otherwise, ignore it
    if (defaults[k] !== void 0) {
      onto[k] = v;
    }
  }

  // Return the overwritten object
  return onto;
};
