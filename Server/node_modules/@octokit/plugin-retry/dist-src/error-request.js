// An asynchronous function 'errorRequest' is defined, which takes four parameters:
// 'state', 'octokit', 'error', and 'options'.
async function errorRequest(state, octokit, error, options) {
  // The function checks if the 'request' property and the 'request.request' property
  // exist in the 'error' object. If not, the function throws the error as is.
  if (!error.request || !error.request.request) {
    throw error;
  }

  // The function checks if the status code of the error is greater than or equal to 400
  // and if the status code is not in the 'doNotRetry' array of the 'state' object.
  // If both conditions are true, the function proceeds to handle the error.
  if (error.status >= 400 && !state.doNotRetry.includes(error.status)) {
    // The 'retries' variable is assigned the value of the 'retries' property of the
    // 'options.request' object, or the value of the 'retries' property of the 'state'
    // object if the former is not present.
    const retries = options.request.retries != null ? options.request.retries : state.retries;

    // The 'retryAfter' variable is assigned the value of the square of the sum of 1
    // and the value of the 'retryCount' property of the 'options.request' object.
    // If the 'retryCount' property is not present, the value of 'retryAfter' is 1.
    const retryAfter = Math.pow((options.request.retryCount || 0) + 1, 2);

    // The function throws a new error after retrying the request based on the 'retries'
    // and 'retryAfter' values.
    throw octokit.retry.retryRequest(error, retries, retryAfter);
  }

  // If none of the conditions are met, the function throws the original error.
  throw error;
}

// The 'errorRequest' function is exported for use in other modules.
export {
