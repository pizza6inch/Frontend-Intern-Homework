/**
 * The `Handler` type is the interface that AWS Lambda will use to invoke your handler function.
 * It is a generic type that takes two type parameters: `TEvent` and `TResult`.
 * `TEvent` is the type of the event object passed to the handler function, and `TResult` is the type of
 * the result returned by the handler function.
 *
 * The `Handler` type is defined as an asynchronous function that takes three arguments:
 * 1. `event`: The parsed JSON data in the Lambda request payload. For a service-triggered Lambda,
 *    this should be in the format of a type ending in `Event`.
 * 2. `context`: Runtime contextual information of the current invocation, such as the caller identity,
 *    available memory and time remaining, and a mutable property controlling when the Lambda execution
 *    completes.
 * 3. `callback`: A Node.js-style completion callback that the Lambda runtime will provide. It can be
 *    used to provide the Lambda result payload value or any execution error. Alternatively, the handler
 *    function can return a promise that resolves with the result payload value or rejects with the
 *    execution error.
 *
 * The `Handler` type returns a promise that resolves with the Lambda result payload value or rejects
 * with the execution error.
 */
export type Handler<TEvent = any, TResult = any> = (
    event: TEvent,
    context: Context,
    callback: Callback<TResult>,
) => void | Promise<TResult>;

/**
 * The `Context` interface represents the runtime contextual information of the current Lambda invocation.
 * It contains various properties, such as `functionName`, `functionVersion`, `memoryLimitInMB`,
 * `logGroupName`, and `logStreamName`, that provide information about the Lambda function and its execution.
 *
 * The `Context` interface also contains several methods, such as `getRemainingTimeInMillis()`,
 * that provide additional functionality for the Lambda function.
 */
export interface Context {
    callbackWaitsForEmptyEventLoop: boolean;
    functionName: string;
    functionVersion: string;
    invokedFunctionArn: string;
    memoryLimitInMB: string;
    awsRequestId: string;
    logGroupName: string;
    logStreamName: string;
    identity?: CognitoIdentity | undefined;
    clientContext?: ClientContext | undefined;

    getRemainingTimeInMillis(): number;

    // Deprecated functions for compatibility with earlier Node.js Runtime v0.10.42
    // They are not documented and are deprecated, but they still work as of the 12.x runtime.
    done?(error?: Error, result?: any): void;
    fail?(error: Error | string): void;
    succeed?(messageOrObject?: any): void;
    succeed?(message: string, object?: any): void;
}

/**
 * The `CognitoIdentity` interface represents the identity information of the user who invoked the Lambda function.
 * It contains two properties: `cognitoIdentityId` and `cognitoIdentityPoolId`, which provide information about
 * the user's identity and the identity pool they belong to.
 */
export interface CognitoIdentity {
    cognitoIdentityId: string;
    cognitoIdentityPoolId: string;
}

/**
 * The `ClientContext` interface represents the context information of the client that invoked the Lambda function.
 * It contains two properties: `client` and `env`, which provide information about the client and its environment.
 */
export interface ClientContext {
    client: ClientContextClient;
    env: ClientContextEnv;
}

/**
 * The `ClientContextClient` interface represents the client information of the client that invoked the Lambda function.
 * It contains several properties, such as `installationId`, `appTitle`, `appVersionName`, `appVersionCode`,
 * `appPackageName`, that provide information about the client and its installation.
 */
export interface ClientContextClient {
    installationId: string;
    appTitle: string;
    appVersionName: string;
    appVersionCode: string;
    appPackageName: string;
}

/**
 * The `ClientContextEnv` interface represents the environment information of the client that invoked the Lambda function.
 * It contains several properties, such as `platformVersion`, `platform`, `make`, `model`, `locale`, that provide
 * information about the client's environment.
 */
export interface ClientContextEnv {
    platformVersion: string;
    platform: string;
    make: string;
    model: string;
    locale: string;
}

/**
 * The `Callback` type is a Node.js-style callback parameter for the `Handler` type.
 * It can be used instead of returning a promise, and it takes two type parameters: `TResult` and `TError`.
 * `TResult` is the type of the result returned by the handler function, and `TError` is the type of the error
 * thrown by the handler function.
 *
 * The `Callback` type takes two arguments:
 * 1. `error`: The error payload for a failed Lambda execution. If an `Error` instance is passed,
 *    the error payload uses the `name` property as the `errorType`, the `message` property as the
 *    `errorMessage`, and parses the `stack` property string into the `trace` array. For other values,
 *    the `errorType` is `typeof value`, the `errorMessage` is `String(value)`, and `trace` is an empty
 *    array.
 * 2. `result`: The result payload for a successful Lambda execution. Pass `null` or `undefined` for the
 *    `error` parameter to use this parameter.
 */
export type Callback<TResult = any, TError = any> = (
    error?: TError | string | null,
    result?: TResult,
) => void;
