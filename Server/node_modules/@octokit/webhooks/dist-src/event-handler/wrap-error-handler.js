// This function, wrapErrorHandler, takes in two arguments: a handler function and an error object.
// Its purpose is to wrap the handler function and catch any errors that might occur during its execution.
function wrapErrorHandler(handler, error) {
  // Declare a variable, returnValue, to store the return value of the handler function.
  let returnValue;
  // Try to execute the handler function with the error object as its argument.
  try {
    // Assign the return value of the handler function to the returnValue variable.
    returnValue = handler(error);
  } catch (error2) {
    // If an error (error2) occurs during the execution of the handler function, log a message to the console.
    console.log('FATAL: Error occurred in "error" event handler');
    // Log the error object (error2) to the console.
    console.log(error2);
  }
  // If the handler function returned a Promise, attach a catch block to it to catch any errors that might occur.
  if (returnValue && returnValue.catch) {
    returnValue.catch((error2) => {
      // Log a message to the console.
      console.log('FATAL: Error occurred in "error" event handler');
      // Log the error object (error2) to the console.
      console.log(error2);
    });
  }
}

// Export the wrapErrorHandler function so it can be used in other modules.
export {
  wrapErrorHandler
};
