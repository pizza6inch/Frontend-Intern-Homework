import type { HookCollection } from "before-after-hook";
import { request } from "@octokit/request";
import { graphql } from "@octokit/graphql";
import type { Constructor, Hooks, OctokitOptions, OctokitPlugin, ReturnTypeOf, UnionToIntersection } from "./types.js";
export type { OctokitOptions } from "./types.js";

/**
 * The main class for interacting with the GitHub API.
 * Users can create an instance of this class with their access token and other options.
 */
export declare class Octokit {
    static VERSION: string;

    /**
    * Statically sets default options for all Octokit instances.
    * @param defaults - The default options to set for all Octokit instances.
    */
    static defaults<S extends Constructor<any>>(this: S, defaults: OctokitOptions | Function): S;

    static plugins: OctokitPlugin[];

    /**
    * Attaches one or more plugins to the current Octokit instance.
    * @param newPlugins - The plugins to attach.
    * @returns The current Octokit instance, with the new plugins attached.
    */
    static plugin<S extends Constructor<any> & {
        plugins: any[];
    }, T extends OctokitPlugin[]>(this: S, ...newPlugins: T): S & Constructor<UnionToIntersection<ReturnTypeOf<T>>>;

    constructor(options?: OctokitOptions);

    /**
    * The `request` function for making HTTP requests to the GitHub API.
    */
    request: typeof request;

    /**
    * The `graphql` function for making GraphQL queries to the GitHub API.
    */
    graphql: typeof graphql;

    /**
    * The logging function for debug, info, warn, and error messages.
    */
    log: {
        debug: (message: string, additionalInfo?: object) => any;
        info: (message: string, additionalInfo?: object) => any;
        warn: (message: string, additionalInfo?: object) => any;
        error: (message: string, additionalInfo?: object) => any;
        [key: string]: any;
    };


