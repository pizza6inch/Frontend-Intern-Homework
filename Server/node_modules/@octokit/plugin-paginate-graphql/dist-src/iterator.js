import { extractPageInfos } from "./extract-page-info";
import { Octokit } from "@octokit/core";
import { getCursorFrom, hasAnotherPage } from "./page-info";
import { MissingCursorChange } from "./errors";

// The createIterator function takes an instance of Octokit as an argument
// and returns another function that generates an asynchronous iterator
const createIterator = (octokit) => {
  return (query, initialParameters = {}) => {
    // This iterator has internal state to keep track of pagination
    let nextPageExists = true;
    let parameters = { ...initialParameters };

    // This iterator conforms to the asyncIterator symbol protocol
    return {
      [Symbol.asyncIterator]: () => ({
        // The next method is part of the asyncIterator protocol
        async next() {
          if (!nextPageExists)
            // If there's no more page to fetch, return done: true
            return { done: true, value: {} };

          // Fetch the GraphQL data using the provided query and parameters
          const response = await octokit.graphql(query, parameters);

          // Extract page info from the GraphQL response
          const pageInfoContext = extractPageInfos(response);

          // Get the next cursor value from the page info
          const nextCursorValue = getCursorFrom(pageInfoContext.pageInfo);

          // Check if there's another page to fetch
          nextPageExists = hasAnotherPage(pageInfoContext.pageInfo);

          // If there's another page and the cursor didn't change, throw an error
          if (nextPageExists && nextCursorValue === parameters.cursor) {
            throw new MissingCursorChange(pageInfoContext, nextCursorValue);
          }

          // Update the parameters with the new cursor value
          parameters = {
            ...parameters,
            cursor: nextCursorValue
          };

         
