// pkg/dist-src/index.js

/**
 * Generates the URL for the OAuth authorization process.
 * @param {Object} options - The options object to configure the authorization URL.
 * @param {string} options.clientType - The type of the OAuth client, either "oauth-app" or "github-app".
 * @param {string} options.baseUrl - The base URL for the authorization process, defaults to "https://github.com".
 * @param {string} options.clientId - The client ID for the OAuth application.
 * @param {string} options.login - The login to prefill in the login form, optional.
 * @param {string} options.redirectUrl - The URL to redirect to after authorization, optional.
 * @param {string|boolean} options.state - The state value to include in the authorization request, defaults to a random string.
 * @param {string[]} options.scopes - The list of scopes for the OAuth authorization, optional.
 * @returns {Object} An object containing the client type, allowSignup, clientId, login, redirectUrl, state, and url properties.
 */
function oauthAuthorizationUrl(options) {
  const clientType = options.clientType || "oauth-app";
  const baseUrl = options.baseUrl || "https://github.com";
  const result = {
    clientType,
    allowSignup: options.allowSignup === false ? false : true,
    clientId: options.clientId,
    login: options.login || null,
    redirectUrl: options.redirectUrl || null,
    state: options.state || Math.random().toString(36).substr(2),
    url: ""
  };

  // Handles the scopes configuration based on the client type
  if (clientType === "oauth-app") {
    const scopes = "scopes" in options ? options.scopes : [];
    result.scopes = typeof scopes === "string" ? scopes.split(/[,\s]+/).filter(Boolean) : scopes;
  }

  // Builds the authorization URL using the provided options
  result.url = urlBuilderAuthorize(`${baseUrl}/login/oauth/authorize`, result);
  return result;
}

/**
 * Constructs the URL for the OAuth authorization process using the given base URL and options.
 * @param {string} base - The base URL for the authorization process.
 * @
