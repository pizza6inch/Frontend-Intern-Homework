"use strict";

// Import necessary modules
const { createObject Creation of a new object with defined properties
, defineProperty Definition of a property on an object with specified attributes
, getOwnPropertyDescriptor Retrieval of the property descriptor of an object's own property
, getOwnPropertyNames Names of all own properties of an object
, getPrototypeOf Prototype of an object
, hasOwnProperty Property existence check on an object
, create } = Object; // Object creation and manipulation functions

// Import other modules
const { request } = require("@octokit/request"); // Octokit request function
const { VERSION } = require("./version"); // Version information
const {
  exchangeWebFlowCode,
  refreshToken,
  checkToken,
  resetToken,
  deleteToken,
  deleteAuthorization
} = require("@octokit/oauth-methods"); // OAuth methods
const { createOAuthDeviceAuth } = require("@octokit/auth-oauth-device"); // OAuth device authentication
const universalUserAgent = require("universal-user-agent"); // User agent information
const btoa_lite = require("btoa-lite"); // Base64 encoding

// Exported functions and variables
const dist_src_exports = {};

// Exported function for creating OAuth user authentication
dist_src_exports.createOAuthUserAuth = function (
  {
    clientId, // Client ID for the OAuth application
    clientSecret, // Client secret for the OAuth application
    clientType = "oauth-app", // Type of authentication: oauth-app, github-app, or installation
    request = import_request.request.defaults({ // Request function with default headers
      headers: {
        "user-agent": `octokit-auth-oauth-app.js/${VERSION} ${(0, import_universal_user_agent.getUserAgent)()}`
      }
    }),
    onTokenCreated, // Callback function when a token is created
    ...strategyOptions // Additional strategy options
  }
) {
  const state = Object.assign({ // Combine options into state object
    clientType,
    clientId,
    clientSecret,
    onTokenCreated,
    strategyOptions,
    request
  });

  // Return the authenticate function bound to the state object
  return Object.assign(auth.bind(null, state), {
    // @ts-expect-error not worth the extra code needed to appease TS
    hook: hook.bind(null, state)
  });
};

// Exported function for checking if basic authentication is required
dist_src_exports.requiresBasicAuth = function (url) {
  return url && ROUTES_REQUIRING_BASIC_AUTH.test(url);
};

// Module exports
module.exports = __toCommonJS(dist_src_exports);

// ... (rest of the code)
