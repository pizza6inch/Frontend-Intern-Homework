import { createHmac } from "node:crypto"; // Import the built-in 'createHmac' module from Node.js crypto library
import { Algorithm } from "../types.js"; // Import Algorithm type from "../types.js"
import { VERSION } from "../version.js"; // Import the version of the package

/**
 * Signs a payload using a secret and a chosen algorithm.
 *
 * @param {object|string} options - Object containing secret and algorithm or a secret string.
 * @param {string} options.secret - The shared secret between the server and client.
 * @param {Algorithm=} options.algorithm - The algorithm to use for signing, defaults to Algorithm.SHA256.
 * @param {string} payload - The payload to sign.
 * @returns {string} - The signed payload with the format: algorithm=<base64-encoded hash>.
 * @throws {TypeError} - Throws an error if secret or payload is missing or if the algorithm is not supported.
 */
async function sign(options, payload) {
  // Destructure the 'secret' and 'algorithm' properties from the 'options' object
  const { secret, algorithm } =
    typeof options === "object"
      ? {
          secret: options.secret,
          algorithm: options.algorithm || Algorithm.SHA256,
        }
      : { secret: options, algorithm: Algorithm.SHA256 };

  // Validate the 'secret' and 'payload'
  if (!secret || !payload) {
    throw new TypeError(
      "[@octokit/webhooks-methods] secret & payload required for sign()"
    );
  }

  // Validate the 'payload' type
  if (typeof payload !== "string") {
    throw new TypeError("[@octokit/webhooks-methods] payload must be a string");
  }

  // Validate the 'algorithm'
  if (!Object.values(Algorithm).includes(algorithm)) {
    throw new TypeError(
      `[@octokit/webhooks] Algorithm ${algorithm} is not supported. Must be  'sha1' or 'sha256'`
    );
