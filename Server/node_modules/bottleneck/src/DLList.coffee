// Define a class named DLList with a constructor that takes two arguments: incr and decr,
// which are both functions. The constructor initializes several properties: _first, _last,
// and length, all of which are set to null or 0.
class DLList {
  constructor(incr, decr) {
    this._first = null;
    this._last = null;
    this.length = 0;
    this.incr = incr;
    this.decr = decr;
  }

  // The push method increases the length by 1, increments the value passed in as incr if it exists,
  // creates a new node with the given value and the current last node as its previous node,
  // and updates the _first and _last properties accordingly.
  push(value) {
    this.length++;
    this.incr && this.incr();
    const node = { value, prev: this._last, next: null };
    if (this._last) {
      this._last.next = node;
      this._last = node;
    } else {
      this._first = this._last = node;
    }
  }

  // The shift method decreases the length by 1, decrements the value passed in as decr if it exists,
  // stores the value of the first node in the list in the value variable, and updates the _first
  // and _last properties accordingly. If the list is empty, the method simply returns.
  shift() {
    if (!this._first) return;
    this.length--;
    this.decr && this.decr();
    const value = this._first.value;
    if ((this._first = this._first.next)) {
      this._first.prev = null;
    } else {
      this._last = null;
    }
    return value;
  }

  // The first method returns the value of the first node in the list if one exists, and undefined
  // otherwise.
  first() {
    return this._first ? this._first.value : undefined;
  }

  // The get
