import * as OctokitTypes from "@octokit/types";
import * as DeviceTypes from "@octokit/auth-oauth-device";
import * as OAuthMethodsTypes from "@octokit/oauth-methods";

// This type defines the possible client types that can be used for authentication.
export type ClientType = "oauth-app" | "github-app";

// Options for the web flow authentication strategy.
type WebFlowOptions = {
    code: string;
    state?: string;
    redirectUrl?: string;
};

// Common options for both OAuth and GitHub app authentication strategies.
type CommonAppStrategyOptions = {
    clientType?: ClientType;
    clientId: string;
    clientSecret: string;
    request?: OctokitTypes.RequestInterface;
    onTokenCreated?: OnToketCreatedCallback; // Callback function for handling token creation.
};

// Common options for OAuth app authentication strategy.
type CommonOAuthAppStrategyOptions = {
    clientType?: "oauth-app";
} & CommonAppStrategyOptions;

// Common options for GitHub app authentication strategy.
type CommonGitHubAppStrategyOptions = {
    clientType?: "github-app";
} & CommonAppStrategyOptions;

// Options for the OAuth app device flow authentication strategy.
type OAuthAppDeviceFlowOptions = {
    onVerification: DeviceTypes.OAuthAppStrategyOptions["onVerification"];
    scopes?: string[];
};

// Options for the GitHub app device flow authentication strategy.
type GitHubDeviceFlowOptions = {
    onVerification: DeviceTypes.OAuthAppStrategyOptions["onVerification"];
};

// Options for existing OAuth app authentication.
type ExistingOAuthAppAuthenticationOptions = {
    clientType: "oauth-app";
    token: string;
    scopes: string[];
};

// Options for existing GitHub app authentication.
type ExistingGitHubAppAuthenticationOptions = {
    token: string;
};

// Options for existing GitHub app authentication with expiration.
type ExistingGitHubAppAuthenticationWithExpirationOptions = {
    token: string;
    refreshToken: string;
    expiresAt: string;
    refreshTokenExpiresAt: string;
};

// Options for OAuth app strategy using web flow.
export type OAuthAppStrategyOptionsWebFlow = CommonOAuthAppStrategyOptions & WebFlowOptions;

// Options for GitHub app strategy using web flow.
export type GitHubAppStrategyOptionsWebFlow = CommonGitHubAppStrategyOptions & WebFlowOptions;

// Options for OAuth app strategy using device flow.
export type OAuthAppStrategyOptionsDeviceFlow = CommonOAuthAppStrategyOptions & OAuthAppDeviceFlowOptions;

// Options for GitHub app strategy using device flow.
export type GitHubAppStrategyOptionsDeviceFlow = CommonGitHubAppStrategyOptions & GitHubDeviceFlowOptions;

// Options for OAuth app strategy using existing authentication.
export type OAuthAppStrategyOptionsExistingAuthentication = CommonOAuthAppStrategyOptions & ExistingOAuthAppAuthenticationOptions;

// Options for GitHub app strategy using existing authentication.
export type GitHubAppStrategyOptionsExistingAuthentication = CommonGitHubAppStrategyOptions & ExistingGitHubAppAuthenticationOptions;

// Options for GitHub app strategy using existing authentication with expiration.
export type GitHubAppStrategyOptionsExistingAuthenticationWithExpiration = CommonGitHubAppStrategyOptions & ExistingGitHubAppAuthenticationWithExpirationOptions;

// Options for OAuth app strategy.
export type OAuthAppStrategyOptions = OAuthAppStrategyOptionsWebFlow | OAuthAppStrategyOptionsDeviceFlow | OAuthAppStrategyOptionsExistingAuthentication;

// Options for GitHub app strategy.
export type GitHubAppStrategyOptions = GitHubAppStrategyOptionsWebFlow | GitHubAppStrategyOptionsDeviceFlow | GitHubAppStrategyOptionsExistingAuthentication | GitHubAppStrategyOptionsExistingAuthenticationWithExpiration;

// Type representing OAuth app authentication.
export type OAuthAppAuthentication = {
    tokenType: "oauth";
    type: "token";
} & OAuthMethodsTypes.OAuthAppAuthentication;

// Type representing GitHub app authentication.
export type GitHubAppAuthentication = {
    tokenType: "oauth";
    type: "token";
} & OAuthMethodsTypes.GitHubAppAuthentication;

// Type representing GitHub app authentication with expiration.
export type GitHubAppAuthenticationWithExpiration = {
    tokenType: "oauth";
    type: "token";
} & OAuthMethodsTypes.GitHubAppAuthenticationWithExpiration;

// Interface for OAuth app authentication function.
export interface OAuthAppAuthInterface {
    (options?: OAuthAppAuthOptions): Promise<OAuthAppAuthentication>;
    hook(request: OctokitTypes.RequestInterface, route: OctokitTypes.Route | OctokitTypes.EndpointOptions, parameters?: OctokitTypes.RequestParameters): Promise<OctokitTypes.OctokitResponse<any>>;
}

// Interface for GitHub app authentication function.
export interface GitHubAppAuthInterface {
    (options?: GitHubAppAuthOptions): Promise<GitHubAppAuthentication | GitHubAppAuthenticationWithExpiration>;
    hook(request: OctokitTypes.RequestInterface, route: OctokitTypes.Route | OctokitTypes.EndpointOptions, parameters?: OctokitTypes.RequestParameters): Promise<OctokitTypes.OctokitResponse<any>>;
}

// Callback function for handling token creation.
type OnToketCreatedCallback = (authentication: OAuthAppAuthentication | GitHubAppAuthentication | GitHubAppAuthenticationWithExpiration | undefined, options: OAuthAppAuthOptions | GitHubAppAuthOptions) => void | Promise<void>;

// Type representing OAuth app state.
export type OAuthAppState = {
    clientId: string;
    clientSecret: string;
    clientType: "oauth-app";
    request: OctokitTypes.RequestInterface;
    onTokenCreated?: CommonAppStrategyOptions["onTokenCreated"];
    strategyOptions: WebFlowOptions | OAuthAppDeviceFlowOptions | ExistingOAuthAppAuthenticationOptions;
    authentication?: OAuthAppAuthentication & {
        invalid?: true;
    };
};

// Type representing GitHub app state with authentication.
type GitHubAppStateAuthentication = GitHubAppAuthentication & {
    invalid?: true;
};

// Type
