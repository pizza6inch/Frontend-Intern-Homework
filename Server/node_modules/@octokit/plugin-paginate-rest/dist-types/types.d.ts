import { Octokit } from "@octokit/core";
import * as OctokitTypes from "@octokit/types";

// Export types from @octokit/core and @octokit/types for external use
export type { EndpointOptions, RequestInterface, OctokitResponse, RequestParameters, Route, } from "@octokit/types";
export type { PaginatingEndpoints } from "./generated/paginating-endpoints.js";
import type { PaginatingEndpoints } from "./generated/paginating-endpoints.js";

// Type representing known keys of an object
type KnownKeys<T> = Extract<{
    [K in keyof T]: string extends K ? never : number extends K ? never : K;
} extends {
    [_ in keyof T]: infer U;
} ? U : never, keyof T>;

// Type representing keys of an object that match a given value type
type KeysMatching<T, V> = {
    [K in keyof T]: T[K] extends V ? K : never;
}[keyof T];

// Type representing known keys of an object that match a given value type
type KnownKeysMatching<T, V> = KeysMatching<Pick<T, KnownKeys<T>>, V>;

// Type representing the response data of a paginated request
type GetResultsType<T> = T extends {
    data: any[];
} ? T["data"] : T extends {
    data: object;
} ? T["data"][KnownKeysMatching<T["data"], any[]>] : never;

// Type representing a normalized response with paginated data
type NormalizeResponse<T> = T & {
    data: GetResultsType<T>;
};

// Type representing the data type of a paginated response
type DataType<T> = "data" extends keyof T ? T["data"] : unknown;

// Type representing a map function that maps a paginated response to a custom array
export type MapFunction<T = OctokitTypes.OctokitResponse<PaginationResults<unknown>>, M = unknown[]> = (response: T, done: () => void) => M;

// Type representing pagination results
export type PaginationResults<T = unknown> = T[];

// Interface for the paginate function with various overloads
export interface PaginateInterface {
    /**
     * Paginate a request using endpoint options and map each response to a custom array
     *
     * @param options - Must set `method` and `url`. Plus URL, query or body parameters, as well as `headers`, `mediaType.format`, `request`, or `baseUrl`.
     * @param mapFn - Optional method to map each response to a custom array
     */
    <T, M>(options: OctokitTypes.EndpointOptions, mapFn: MapFunction<OctokitTypes.OctokitResponse<PaginationResults<T>>, M[]>): Promise<PaginationResults<M>>;

    // Overload for paginating a request using endpoint options without a map function
    <T>(options: OctokitTypes.EndpointOptions): Promise<PaginationResults<T>>;

    // Overload for paginating a request using a known endpoint route string and map each response to a custom array
    <R extends keyof PaginatingEndpoints, M extends unknown[]>(route: R, mapFn: MapFunction<PaginatingEndpoints[R]["response"], M>): Promise<M>;

    // Overload for paginating a request using a known endpoint route string, parameters, and map each response to a custom array
    <R extends keyof PaginatingEndpoints, M extends unknown[]>(route: R, parameters: PaginatingEndpoints[R]["parameters"], mapFn: MapFunction<PaginatingEndpoints[R]["response"], M>): Promise<M>;

    // Overload for paginating a request using a known endpoint route string
    <R extends keyof PaginatingEndpoints>(route: R, parameters?: PaginatingEndpoints[R]["parameters"]): Promise<DataType<PaginatingEndpoints[R]["response"]>>;

    // Overload for paginating a request using an unknown endpoint route string
    <T, R extends OctokitTypes.Route = OctokitTypes.Route>(route: R, parameters?: R extends keyof PaginatingEndpoints ? PaginatingEndpoints[R]["parameters"] : OctokitTypes.RequestParameters): Promise<T[]>;

    // Overload for paginating a request using an endpoint method and a map function
    <R extends OctokitTypes.RequestInterface, M extends unknown[]>(request: R, mapFn: MapFunction<NormalizeResponse<OctokitTypes.GetResponseTypeFromEndpointMethod<R>>, M>): Promise<M>;

    // Overload for paginating a request using an endpoint method, parameters, and a map function
    <R extends OctokitTypes.RequestInterface, M extends unknown[]>(request: R, parameters: Parameters<R>[0], mapFn: MapFunction<NormalizeResponse<OctokitTypes.GetResponseTypeFromEndpointMethod<R>>, M>): Promise<M>;

    // Overload for paginating a request using an endpoint method and parameters
    <R extends OctokitTypes.RequestInterface>(request: R, parameters?: Parameters<R>[0]): Promise<NormalizeResponse<OctokitTypes.GetResponseTypeFromEndpointMethod<R>>["data"]>;

    // Property for getting an async iterator to paginate a request
    iterator: {
        // Method for getting an async iterator to paginate a request using endpoint options
        <T>(options: OctokitTypes.EndpointOptions): AsyncIterableIterator<OctokitTypes.OctokitResponse<PaginationResults<T>>>;

        // Method for getting an async iterator to paginate a request using a known endpoint route string and optional parameters
        <R extends keyof PaginatingEndpoints>(route: R, parameters?: PaginatingEndpoints[R]["parameters"]): AsyncIterableIterator<OctokitTypes.OctokitResponse<DataType<PaginatingEndpoints[R]["response"]>>>;

        // Method for getting an async iterator to paginate a request using an unknown endpoint route string and optional parameters
        <T, R extends OctokitTypes.Route = OctokitTypes.Route>(route: R, parameters?: R extends keyof PaginatingEnd
