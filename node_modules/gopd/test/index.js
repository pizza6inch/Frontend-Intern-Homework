'use strict';

// Require the 'tape' module for testing and the 'gOPD' module being tested
var test = require('tape');
var gOPD = require('../');

// Begin a new test suite named 'gOPD'
test('gOPD', function (t) {
  // Nest a subtest within the 'gOPD' test suite, checking if gOPD is supported
  t.test('supported', { skip: !gOPD }, function (st) {
    // Check if 'gOPD' is a function
    st.equal(typeof gOPD, 'function', 'is a function');

    // Define an object 'obj' with property 'x' and value 1
    var obj = { x: 1 };
    // Check if property 'x' exists in object 'obj'
    st.ok('x' in obj, 'property exists');

    // Get the property descriptor for 'x' in 'obj' using gOPD
    var desc = gOPD(obj, 'x');
    // Check if the descriptor matches the expected value
    st.deepEqual(
      desc,
      {
        configurable: true,
        enumerable: true,
        value: 1,
        writable: true
      },
      'descriptor is as expected'
    );

    // End the subtest
    st.end();
  });

  // Nest a subtest within the 'gOPD' test suite, checking if gOPD is not supported
  t.test('not supported', { skip: gOPD }, function (st) {
    // Check if gOPD is falsy
    st.notOk(gOPD, 'is falsy');

    // End the subtest
    st.end();
  });

  // End the test suite
  t.end();
});

