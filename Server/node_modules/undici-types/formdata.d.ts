// Based on https://github.com/octet-stream/form-data/blob/2d0f0dc371517444ce1f22cdde13f51995d0953a/lib/FormData.ts (MIT)
/// <reference types="node" />

import { File } from './file'
import { SpecIterator, SpecIterableIterator } from './fetch'

/**
 * A `string` or `File` that represents a single value from a set of `FormData` key-value pairs.
 * This type definition is used to specify the type of values that can be associated with a key in a `FormData` object.
 */
declare type FormDataEntryValue = string | File

/**
 * Provides a way to easily construct a set of key/value pairs representing form fields and their values, which can then be easily sent using fetch().
 * This is the main class definition for the `FormData` object, which allows you to create a set of key/value pairs to be sent as part of an HTTP request.
 */
export declare class FormData {
  /**
   * Appends a new value onto an existing key inside a FormData object,
   * or adds the key if it does not already exist.
   * The difference between `set()` and `append()` is that if the specified key already exists, `set()` will overwrite all existing values with the new one, whereas `append()` will append the new value onto the end of the existing set of values.
   *
   * @param name The name of the field whose data is contained in `value`.
   * The `name` parameter is a string representing the name of the form field.
   *
   * @param value The field's value. This can be a `Blob`, `File`, or any other value that can be converted to a string.
   * The `value` parameter is the data associated with the form field.
   *
   * @param fileName The filename reported to the server, when a Blob or File is passed as the second parameter.
   * The `fileName` parameter is an optional string that specifies the name of the file when a `Blob` or `File` is passed as the second parameter.
   */
  append(name: string, value: unknown, fileName?: string): void

  /**
   * Set a new value for an existing key inside FormData,
   * or add the new field if it does not already exist.
   *
   * @param name The name of the field whose data is contained in `value`.
   * The `name` parameter is a string representing the name of the form field.
   *
   * @param value The field's value. This can be a `Blob`, `File`, or any other value that can be converted to a string.
   * The `value` parameter is the data associated with the form field.
   *
   * @param fileName The filename reported to the server, when a Blob or File is passed as the second parameter.
   * The `fileName` parameter is an optional string that specifies the name of the file when a `Blob` or `File` is passed as the second parameter.
   *
   */
  set(name: string, value: unknown, fileName?: string): void

  /**
   * Returns the first value associated with a given key from within a `FormData` object.
   * If you expect multiple values and want all of them, use the `getAll()` method instead.
   *
   * @param {string} name A name of the value you want to retrieve.
   * The `name` parameter is a string representing the name of the form field.
   *
   * @returns A `FormDataEntryValue` containing the value. If the key doesn't exist, the method returns null.
   * The `get()` method returns the first value associated with the given key, or `null` if the key doesn't exist.
   */
  get(name: string): FormDataEntryValue | null

  /**
   * Returns all the values associated with a given key from within a `FormData` object.
   *
   * @param {string} name A name of the value you want to retrieve.
   * The `name` parameter is a string representing the name of the form field.
   *
   * @returns An array of `FormDataEntryValue` whose key matches the value passed in the `name` parameter.
   * If the key doesn't exist, the method returns an empty list.
   * The `getAll()` method returns an array of all values associated with the given key.
   */
  getAll(name: string): FormDataEntryValue[]

  /**
   * Returns a boolean stating whether a `FormData` object contains a certain key.
   *
   * @param name A string representing the name of the key you want to test for.
   * The `name` parameter is a string representing the name of the form field.
   *
   * @return A boolean value.
   * The `has()` method returns a boolean indicating whether the key exists in the `FormData` object.
   */
  has(name: string): boolean

  /**
   * Deletes a key and its value(s) from a `FormData` object.
   *
   * @param name The name of the key you want to delete.
   * The `name` parameter is a string representing the name of the form field.
   */
  delete(name: string): void

  /**
   * Executes given callback function for each field of the FormData instance
   *
   * @param callbackfn A function to execute for each field in the FormData instance.
   * The `callbackfn` parameter is a function that is executed once for each field in the `FormData` instance.
   *
   * @param thisArg The value of `this` in the `callbackfn` function.
   * The `thisArg` parameter is the value of `this` in the `callbackfn` function.
   */
  forEach(
    callbackfn: (value: FormDataEntryValue, key: string, iterable: FormData) => void,
    thisArg?: unknown
  ): void

  /**
   * Returns an [`iterator`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols) allowing to go through all keys contained in this `FormData` object.
  
