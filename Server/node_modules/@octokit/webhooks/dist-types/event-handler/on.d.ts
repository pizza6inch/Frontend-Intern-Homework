import type { 		// Importing types for EmitterWebhookEvent, EmitterWebhookEventName, State, WebhookEventHandlerError from "../types.js"
    EmitterWebhookEvent,
    EmitterWebhookEventName,
    State,
    WebhookEventHandlerError
} from "../types.js";

// receiverOn function receives a state, webhookNameOrNames, and handler as arguments
export declare function receiverOn(
    state: State, 		// The state object that contains the application's state
    webhookNameOrNames: EmitterWebhookEventName | EmitterWebhookEventName[], 		// The name or array of names of the webhook events
    handler: Function 		// The function that will be called when the webhook event is triggered
): void;

// receiverOnAny function receives a state and a handler as arguments
export declare function receiverOnAny<TTransformed>(
    state: State, 		// The state object that contains the application's state
    handler: (event: TTransformed extends unknown ? EmitterWebhookEvent : EmitterWebhookEvent & TTransformed) => any 		// The function that will be called when any webhook event is triggered
): void;

// receiverOnError function receives a state and a handler as arguments
export declare function receiverOnError<TTransformed>(
    state: State, 		// The state object that contains the application's state
    handler: (event: WebhookEventHandlerError<TTransformed>) => any 		// The function that will be called when an error occurs in a webhook event handler
): void;
