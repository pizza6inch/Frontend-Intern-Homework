'use strict';

// This function checks if the current JavaScript environment supports
// the Symbol primitive and the Object.getOwnPropertySymbols method.
// It returns a boolean value indicating whether or not the environment
// has symbols.

/* eslint complexity: [2, 18], max-statements: [2, 33] */
module.exports = function hasSymbols() {
  // Check if Symbol is a function and Object.getOwnPropertySymbols is a function.
  // If not, return false.
  if (typeof Symbol !== 'function' || typeof Object.getOwnPropertySymbols !== 'function') {
    return false;
  }

  // Check if Symbol.iterator is a symbol.
  // If so, return true.
  if (typeof Symbol.iterator === 'symbol') {
    return true;
  }

  // Create a new object and a new Symbol.
  var obj = {};
  var sym = Symbol('test');
  var symObj = Object(sym);

  // Check if Symbol is a string.
  // If so, return false.
  if (typeof sym === 'string') {
    return false;
  }

  // Check if the object returned by Object.prototype.toString.call()
  // is equal to '[object Symbol]' for both sym and symObj.
  // If not, return false.
  if (Object.prototype.toString.call(sym) !== '[object Symbol]' ||
      Object.prototype.toString.call(symObj) !== '[object Symbol]') {
    return false;
  }

  // The following two lines are temporarily disabled due to issues in other libraries.
  // Check if sym is an instance of Symbol and symObj is an instance of Symbol.
  // If not, return false.
  // if (sym instanceof Symbol) { return false; }
  // if (!(symObj instanceof Symbol)) { return false; }

  // The following two lines are temporarily disabled due to issues in other libraries.
  // Check if Symbol.prototype.toString is a function and if the string returned
  // by String(sym) is equal to Symbol.prototype.toString.call(sym).
  // If not, return false.
  // if (typeof Symbol.prototype.toString !== 'function') { return false; }
  // if (String(sym) !== Symbol.prototype.toString.call(sym)) { return false; }

  // Assign a value to the Symbol and check if the for...in loop does not iterate
  // over the Symbol.
  var symVal = 42;
  obj[sym] = symVal;
  for (sym in obj) {
    // If the loop iterates, return false.
    return false;
  }

  // Check if the length of Object.keys(obj) is not equal to 0.
  // If so, return false.
  if (typeof Object.keys === 'function' && Object.keys(obj).length !== 0) {
    return false;
  }

