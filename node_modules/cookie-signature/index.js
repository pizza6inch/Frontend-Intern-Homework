/**
 * Module dependencies.
 */
// This line indicates that the 'crypto' module is required for this file.
// The 'crypto' module provides cryptographic functionality that is used
// throughout this code.

var crypto = require('crypto');

/**
 * Sign the given `val` with `secret`.
 *
 * @param {String} val - The value to be signed.
 * @param {String} secret - The secret string used to sign the value.
 * @return {String} - The signed value.
 * @api private - This function is intended for internal use within this module.
 */
// This function signs the given value using the provided secret string.
// The signed value is a concatenation of the original value and a
 * cryptographic signature generated using the 'sha256' algorithm and the
// provided secret. The signature is encoded in base64 format and the equals
// sign at the end is removed.

exports.sign = function(val, secret){
  if ('string' != typeof val) {
    // The function throws a TypeError if the value is not a string.
    throw new TypeError("Cookie value must be provided as a string.");
  }
  if ('string' != typeof secret) {
    // The function throws a TypeError if the secret is not a string.
    throw new TypeError("Secret string must be provided.");
  }
  return val + '.' + crypto
    .createHmac('sha256', secret)
    .update(val)
    .digest('base64')
    .replace(/\=+$/, '');
};

/**
 * Unsign and decode the given `val` with `secret`,
 * returning `false` if the signature is invalid.
 *
 * @param {String} val - The signed value to be unsigned.
 * @param {String} secret - The secret string used to sign the value.
 * @return {String|Boolean} - The unsigned value or false if the signature is invalid.
 * @api private - This function is intended for internal use within this module.
 */
// This function verifies the signature of the given signed value using the
// provided secret string. If the signature
