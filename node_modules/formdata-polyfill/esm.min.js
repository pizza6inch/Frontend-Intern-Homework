/*! formdata-polyfill. MIT License. Jimmy WÃ¤rting <https://jimmy.warting.se/opensource> */

// Importing 'fetch-blob' and 'fetch-blob/file.js' modules
import C from 'fetch-blob'
import F from 'fetch-blob/file.js'

// Variable declarations using destructuring assignment
var {toStringTag:t,iterator:i,hasInstance:h} = Symbol,
r = Math.random,
m = 'append,set,get,getAll,delete,keys,values,entries,forEach,constructor'.split(','),
f = (a, b, c) => (a += '', /^(Blob|File)$/.test(b && b[t]) ? [(c = c !== void 0 ? c + '' : b[t] === 'File' ? b.name : 'blob', a), b.name !== c || b[t] === 'blob' ? new F([b], c, b) : b] : [a, b + '']),
e = (n, a, e) => {
  if (a.length < e) {
    throw new TypeError(`Failed to execute '${n}' on 'FormData': ${e} arguments required, but only ${a.length} present.`)
  }
}

// Exporting 'File' as a named export
export const File = F

/**
 * @type {typeof globalThis.FormData}
 */
// Defining a class 'FormData' that extends the built-in 'FormData' constructor
export const FormData = class FormData {
  #d = [];

  // Constructor function for the 'FormData' class
  constructor(...a) {
    if (a.length) throw new TypeError(`Failed to construct 'FormData': parameter 1 is not of type 'HTMLFormElement'.`)
  }

  // Overriding the 'toStringTag' property of the 'FormData' class
  get [t]() {
    return 'FormData'
  }

  // Overriding the iterator property of the 'FormData' class
  [i]() {
    return this.entries()
  }

  // Overriding the 'hasInstance' property of the 'FormData' class
  static [h](o) {
    return o && typeof o === 'object' && o[t] === 'FormData' && !m.some(m => typeof o[m] !== 'function')
  }

  // Method for appending key-value pairs to the 'FormData' object
  append(...a) {
    x('append', arguments, 2);
    this.#d.push(f(...a))
  }

  // Method for deleting a key-value pair from the 'FormData' object
  delete(a) {
    x('delete', arguments, 1);
    a += '';
    this.#d = this.#d.filter(([b]) => b !== a)
  }

  // Method for retrieving the value associated with a key in the 'FormData' object
  get(a) {
    x('get', arguments, 1);
    a += '';
    for (var b = this.#d, l = b.length, c = 0; c < l; c++) if (b[c][0] === a) return b[c][1];
    return null
  }

  // Method for retrieving all the values associated with a key in the 'FormData' object
  getAll(a, b) {
    x('getAll', arguments, 1);
    b = [];
    a += '';
    this.#d.forEach(c => c[0] === a && b.push(c[1]));
    return b
  }

  // Method for checking if a key exists in the 'FormData' object
  has(a) {
    x('has', arguments, 1);
    a += '';
    return this.#d.some(b => b
