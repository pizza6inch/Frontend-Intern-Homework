"use strict";

// This module exports an unauthenticated authentication function and related hooks.

// pkg/dist-src/index.js

/*
 * Exports the createUnauthenticatedAuth function, which returns an authentication function and a hook function.
 */
var dist_src_exports = {};

/*
 * Exports the createUnauthenticatedAuth function, which is used to create an authentication object with a specified reason.
 */
__export(dist_src_exports, {
  createUnauthenticatedAuth: () => createUnauthenticatedAuth
});

module.exports = __toCommonJS(dist_src_exports);

// pkg/dist-src/auth.js

/*
 * The auth function returns an unauthenticated authentication object with a specified reason.
 * @param {string} reason - The reason for using unauthenticated authentication.
 * @returns {Object} An authentication object with a type of 'unauthenticated' and the specified reason.
 */
async function auth(reason) {
  return {
    type: "unauthenticated",
    reason
  };
}

// pkg/dist-src/is-rate-limit-error.js

/*
 * The isRateLimitError function checks if an error is a rate limit error by comparing the status code and response headers.
 * @param {Object} error - The error object to check.
 * @returns {boolean} True if the error is a rate limit error, false otherwise.
 */
var import_request_error = require("@octokit/request-error");

function isRateLimitError(error) {
  if (error.status !== 403) {
    return false;
  }
  if (!error.response) {
    return false;
  }
  return error.response.headers["x-ratelimit-remaining"] === "0";
}

// pkg/dist-src/is-abuse-limit-error.js

/*
 * The isAbuseLimitError function checks if an error is an abuse limit error by testing the error message with a regular expression.
 * @param {Object} error - The error object to check.
 * @returns {boolean} True if the error is an abuse limit error, false otherwise.
 */
var import_request_error2 = require("@octokit/request-error");
var REGEX_ABUSE_LIMIT_MESSAGE = /\babuse\b/i;

function isAbuseLimitError(error) {
  if (error.status !== 403) {
    return false;
  }
  return REGEX_ABUSE_LIMIT_MESSAGE.test(error.message);
}

// pkg/dist-src/hook.js

/*
 * The hook function adds error handling to a request, throwing a more informative error message if the request fails.
 * @param {string} reason - The reason for using unauthenticated authentication.
 * @param {Object} request - The request object.
 * @param {Object} route - The route object.
 * @param {Object} parameters - The parameters object.
 * @returns {Promise} A promise that resolves to the result of the request or rejects with an error.
 */
async function hook(reason, request, route, parameters) {
  const endpoint = request.endpoint.merge(
    route,
    parameters
  );

  return request(endpoint).catch((error) => {
    if (error.status === 404) {
      error.message = `Not found. May be due to lack of authentication. Reason: ${reason}`;
      throw error;
    }

    if (isRateLimitError(error)) {
      error.message = `API rate limit exceeded. This maybe caused by the lack of authentication. Reason: ${reason}`;
      throw error;
    }

    if (isAbuseLimitError(error)) {
      error.message = `You have triggered an abuse detection mechanism. This maybe caused by the lack of authentication. Reason: ${reason}`;
      throw error;
    }

    if (error.status === 401) {
      error.message = `Unauthorized. "${endpoint.method} ${endpoint.url}" failed most likely due to lack of authentication. Reason: ${reason}`;
      throw error;
    }

    if (error.status >= 400 && error.status < 500) {
      error.message = error.message.replace(
        /\.?$/,
        `. May be caused by lack of authentication (${reason}).`
      );
    }

    throw error;
  });
}

// pkg/dist-src/index.js

/*
 * The createUnauthenticatedAuth function creates an authentication object with a specified reason.
 * @param {Object} options - The options object.
 * @param {string} options.reason - The reason for using unauthenticated authentication.
 * @returns {Object} An authentication object with a hook function for error handling.
 */
var createUnauthenticatedAuth = function createUnauthenticatedAuth2(options) {
  if (!options || !options.reason) {
    throw new Error(
      "[@octokit/auth-unauthenticated] No reason passed to createUnauthenticatedAuth"
    );
  }

  // Returns an authentication object with a type of 'unauthenticated' and the specified reason.
  return Object.assign(auth.bind(null, options.reason), {
    hook: hook.bind(null, options.reason)
  });
};

// Annotate the CommonJS export names for ESM import in node:
0 && (module
