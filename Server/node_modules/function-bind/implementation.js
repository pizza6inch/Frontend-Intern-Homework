'use strict';

/* eslint no-invalid-this: 1 */

// ERROR_MESSAGE is a constant string that will be used to throw a TypeError
// if the 'this' value passed to the bind function is not a function.
var ERROR_MESSAGE = 'Function.prototype.bind called on incompatible ';

// toStr is a reference to the Object.prototype.toString method.
var toStr = Object.prototype.toString;

// max is a reference to the Math.max method.
var max = Math.max;

// funcType is a string that represents the type of a function object.
var funcType = '[object Function]';

// concatty is a function that concatenates two arrays into one.
var concatty = function concatty(a, b) {
    var arr = [];

    // Iterate over the first array and copy its elements into the new array.
    for (var i = 0; i < a.length; i += 1) {
        arr[i] = a[i];
    }

    // Iterate over the second array and copy its elements into the new array.
    for (var j = 0; j < b.length; j += 1) {
        arr[j + a.length] = b[j];
    }

    // Return the new array.
    return arr;
};

// slicy is a function that returns a new array that is a slice of the input array.
var slicy = function slicy(arrLike, offset) {
    var arr = [];
    for (var i = offset || 0, j = 0; i < arrLike.length; i += 1, j += 1) {
        arr[j] = arrLike[i];
    }
    return arr;
};

// joiny is a function that joins the elements of an array into a string.
var joiny = function (arr, joiner) {
    var str = '';
    for (var i = 0; i < arr.length; i += 1) {
        str += arr[i];
        if (i + 1 < arr.length) {
            str += joiner;
        }
    }
    return str;
};

// The bind function is a method that allows you to "freeze" a function in time
// by creating a version of the function that, when called, will have its 'this'
// value set to the provided value, and will have a set of arguments pre-filled.
module.exports = function bind(that) {
    var target = this;

    // Check if the 'this' value passed to the bind function is a function.
    if (typeof target !== 'function' || toStr.apply(target) !== funcType) {
        throw new TypeError(ERROR_MESSAGE + target);
    }

    // args is an array that contains the arguments passed to the bind function,
    // starting from the second argument.
    var args = slicy(arguments, 1);

    // binder is a function that will be used to create the new bound function.
    var binder = function () {
        if (this instanceof bound) {
            // If the bound function is called with the new operator, call the
            // target function with the 'this' value set to the newly created
            // object, and with the pre-filled arguments and the arguments
            // passed to the bound function.
            var result = target.apply(
