// Import required modules: makeTest, Bottleneck, and assert
var makeTest = require('./context')
var Bottleneck = require('./bottleneck')
var assert = require('assert')

// Describe the 'Priority' suite of tests
describe('Priority', function () {
  var c; // An instance of the test context

  // After each test case, disconnect the limiter
  afterEach(function () {
    return c.limiter.disconnect(false)
  })

  // Test case: Should do basic ordering
  it('Should do basic ordering', function () {
    c = makeTest({maxConcurrent: 1, minTime: 100, rejectOnDrop: false})

    // Schedule tasks with different priorities and expected results
    return Promise.all([
      c.pNoErrVal(c.limiter.schedule(c.slowPromise, 50, null, 1), 1),
      c.pNoErrVal(c.limiter.schedule(c.promise, null, 2), 2),
      c.pNoErrVal(c.limiter.schedule({priority: 1}, c.promise, null, 5, 6), 5, 6),
      c.pNoErrVal(c.limiter.schedule(c.promise, null, 3), 3),
      c.pNoErrVal(c.limiter.schedule(c.promise, null, 4), 4)
    ])
    .then(function () {
      // Check the order of the results and the total duration
      return c.last()
    })
    .then(function (results) {
      c.checkResultsOrder([[1], [5,6], [2] ,[3], [4]])
      c.checkDuration(400)
    })
  })

  // Test case: Should support LEAK
  it('Should support LEAK', function () {
    c = makeTest({
      maxConcurrent: 1,
      minTime: 100,
      highWater: 3,
      strategy: Bottleneck.strategy.LEAK,
      rejectOnDrop: false
    })

    // Check if the 'dropped' event is emitted
    c.limiter.on('dropped', function (dropped) {
      c.mustExist(dropped.task)
      c.mustExist(dropped.args)
      c.mustExist(dropped.promise)
      called = true
    })

    // Schedule tasks with different priorities and expected results
    c.limiter.submit(c.slowJob, 50, null, 1, c.noErrVal(1))
    c.limiter.submit(c.job, null, 2, c.noErrVal(2))
    c.limiter.submit(c.job, null, 3, c.noErrVal(3))
    c.limiter.submit(c.job, null, 4, c.noErrVal(4))
    c.limiter.submit({priority: 2}, c.job, null, 5, c.noErrVal(5))
    c.limiter.submit({priority: 1}, c.job, null, 6, c.noErrVal(6))
    c.limiter.submit({priority: 9}, c.job, null, 7, c.noErrVal(7))

    // Wait for all tasks to complete and check the results
    return c.last({ weight: 0 })
    .then(function (results) {
      c.checkDuration(200)
      c.checkResultsOrder([[1], [6], [5]])
      c.mustEqual(called, true)
    })
  })

  // ... Continue this process for the remaining test cases
})
