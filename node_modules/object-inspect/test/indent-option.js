// Import required modules
var test = require('tape'); // A test runner module for Node.js
var forEach = require('for-each'); // A utility module for iterating over arrays or objects

var inspect = require('../'); // The function to be tested, which formats objects for inspection

// A test case for invalid indent options
test('bad indent options', function (t) {
  // Use forEach to iterate over an array of invalid indent values
  forEach([
      undefined, // Invalid because indent is not specified
      true, // Invalid because indent should be a number or a string
      false, // Invalid because indent should be a number or a string
      -1, // Invalid because indent should be a positive number
      1.2, // Invalid because indent should be an integer
      Infinity, // Invalid because indent should be a finite number
      -Infinity, // Invalid because indent should be a finite number
      NaN // Invalid because indent should be a number or a string
  ], function (indent) {
      // Assert that calling inspect with the invalid indent value throws a TypeError
      t['throws'](
          function () { inspect('', { indent: indent }); }, // The function to call
          TypeError, // The expected type of error
          'Indent value of ' + inspect(indent) + ' is invalid' // The expected error message
      );
  });

  // Assert that the test has ended
  t.end();
});

// A test case for formatting a simple object with indentation
test('simple object with indent', function (t) {
  t.plan(2); // Specify that there will be two assertions

  // Define a simple object to format
  var obj = { a: 1, b: 2 };

  // Define the expected formatted object with indentation using spaces
  var expectedSpaces = [
      '{',
      '  a: 1,',
      '  b: 2',
      '}'
  ].join('\n');
  // Define the expected formatted object with indentation using tabs
  var expectedTabs = [
      '{',
      '	a: 1,',
      '	b: 2',
      '}'
  ].join('\n');

  // Assert that the formatted object with indentation using spaces is correct
  t.equal(inspect(obj, { indent: 2 }), expectedSpaces, 'Formatted object with indentation using spaces is correct');
  // Assert that the formatted object with indentation using tabs is correct
  t.equal(inspect(obj, { indent: '\t' }), expectedTabs, 'Formatted object with indentation using tabs is correct');
});

// Additional test cases for formatting different types of objects with indentation
// ...

// A test case for formatting a Set object
test('Set', { skip: typeof Set !== 'function' }, function (t) {
  // ...
});

// A test case for formatting a Map object
test('Map', { skip: typeof Map !== 'function' }, function (t) {
  // ...
});
