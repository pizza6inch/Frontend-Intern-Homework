import { isRateLimitError } from "./is-rate-limit-error";
import { isAbuseLimitError } from "./is-abuse-limit-error";

// The 'hook' function is an async function that receives 'reason', 'request', 'route', and 'parameters' as arguments
async function hook(reason, request, route, parameters) {
  // 'endpoint' is created by merging 'request.endpoint', 'route', and 'parameters'
  const endpoint = request.endpoint.merge(
    route,
    parameters
  );

  // The 'catch' block handles any errors that occur during the request
  return request(endpoint)
    .catch((error) => {
      // If the error status is 404, the error message is updated and re-thrown
      if (error.status === 404) {
        error.message = `Not found. May be due to lack of authentication. Reason: ${reason}`;
        throw error;
      }

      // If the error is a rate limit error, the error message is updated and re-thrown
      if (isRateLimitError(error)) {
        error.message = `API rate limit exceeded. This maybe caused by the lack of authentication. Reason: ${reason}`;
        throw error;
      }

      // If the error is an abuse limit error, the error message is updated and re-thrown
      if (isAbuseLimitError(error)) {
        error.message = `You have triggered an abuse detection mechanism. This maybe caused by the lack of authentication. Reason: ${reason}`;
        throw error;
      }

      // If the error status is 401, the error message is updated and re-thrown
      if (error.status === 401) {
        error.message = `Unauthorized. "${endpoint.method} ${endpoint.url}" failed most likely due to lack of authentication. Reason: ${reason}`;
        throw error;
      }

      // If the error status is between 400 and 500 (exclusive), the error message is updated and re-thrown
      if (error.status >=
