import { Handler } from "../../handler";

/**
 * This is an interface for a Cognito User Pool trigger event.
 * This event type is deprecated and will be removed in the future.
 * It is recommended to use specific event types instead.
 *
 * @deprecated Please use specific event types instead
 *
 * Documentation for this event can be found here:
 * http://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-working-with-aws-lambda-triggers.html
 */
export interface CognitoUserPoolTriggerEvent {
    version: number; // The version of the event data.
    triggerSource: 
        | "PreSignUp_SignUp"
        | "PreSignUp_ExternalProvider"
        | "PostConfirmation_ConfirmSignUp"
        | "PreAuthentication_Authentication"
        | "PostAuthentication_Authentication"
        | "CustomMessage_SignUp"
        | "CustomMessage_AdminCreateUser"
        | "CustomMessage_ResendCode"
        | "CustomMessage_ForgotPassword"
        | "CustomMessage_UpdateUserAttribute"
        | "CustomMessage_VerifyUserAttribute"
        | "CustomMessage_Authentication"
        | "DefineAuthChallenge_Authentication"
        | "CreateAuthChallenge_Authentication"
        | "VerifyAuthChallengeResponse_Authentication"
        | "PreSignUp_AdminCreateUser"
        | "PostConfirmation_ConfirmForgotPassword"
        | "TokenGeneration_HostedAuth"
        | "TokenGeneration_Authentication"
        | "TokenGeneration_NewPasswordChallenge"
        | "TokenGeneration_AuthenticateDevice"
        | "TokenGeneration_RefreshTokens"
        | "UserMigration_Authentication"
        | "UserMigration_ForgotPassword"; // The source of the trigger.
    region: string; // The region where the user pool is located.
    userPoolId: string; // The ID of the user pool.
    userName?: string | undefined; // The user name associated with the event.
    callerContext: {
        awsSdkVersion: string; // The version of the AWS SDK used by the client.
        clientId: string; // The ID of the client that made the request.
    };
    request: {
        userAttributes: { [key: string]: string }; // The user attributes.
        validationData?: { [key: string]: string } | undefined; // Validation data for the user attributes.
        codeParameter?: string | undefined; // The code parameter for the event.
        linkParameter?: string | undefined; // The link parameter for the event.
        usernameParameter?: string | undefined; // The username parameter for the event.
        newDeviceUsed?: boolean | undefined; // Whether a new device was used for the event.
        session?:
            | Array<{
                challengeName:
                    | "CUSTOM_CHALLENGE"
                    | "PASSWORD_VERIFIER"
                    | "SMS_MFA"
                    | "DEVICE_SRP_AUTH"
                    | "DEVICE_PASSWORD_VERIFIER"
                    | "ADMIN_NO_SRP_AUTH"
                    | "SRP_A";
                challengeResult: boolean; // The result of the challenge.
                challengeMetadata?: string | undefined; // Metadata for the challenge.
            }>
            | undefined;
        challengeName?: string | undefined; // The name of the challenge.
        privateChallengeParameters?: { [key: string]: string } | undefined; // Private parameters for the challenge.
        challengeAnswer?: string | undefined; // The answer to the challenge.
        password?: string | undefined; // The password for the event.
        clientMetadata?: { [key: string]: string } | undefined; // Metadata provided by the client.
        userNotFound?: boolean | undefined; // Whether the user was not found.
    };
    response: {
        autoConfirmUser?: boolean | undefined; // Whether to auto-confirm the user.
        autoVerifyPhone?: boolean | undefined; // Whether to auto-verify the phone number.
        autoVerifyEmail?: boolean | undefined; // Whether to auto-verify the email address.
        smsMessage?: string | undefined; // The SMS message to send.
        emailMessage?: string | undefined; // The email message to send.
        emailSubject?: string | undefined; // The email subject.
        challengeName?: string | undefined; // The name of the challenge.
        issueTokens?: boolean | undefined; // Whether to issue tokens.
        failAuthentication?: boolean | undefined; // Whether to fail the authentication.
        publicChallengeParameters?: { [key: string]: string } | undefined; // Public parameters for the challenge.
        privateChallengeParameters?: { [key: string]: string } | undefined; // Private parameters for the challenge.
        challengeMetadata?: string | undefined; // Metadata for the challenge.
        answerCorrect?: boolean | undefined; // Whether the answer to the challenge is correct.
        userAttributes?: { [key: string]: string } | undefined; // The user attributes.
        finalUserStatus?: "CONFIRMED" | "RESET_REQUIRED" | undefined; // The final user status.
        messageAction?: "SUPPRESS" | undefined; // The message action.
        desiredDeliveryMediums?: Array<"EMAIL" | "SMS"> | undefined; // The desired delivery mediums.
        forceAliasCreation?: boolean | undefined; // Whether to force alias creation.
        claimsOverrideDetails?:
            | {
                claimsToAddOrOverride?: { [key: string]: string } | undefined; // Claims to add or override.
                claimsToSuppress?: string[] | undefined; // Claims to suppress.
                groupOverrideDetails?:
                    | null
                    | {
                        groupsToOverride?: string[] | undefined; // Groups to override.
                        iamRolesToOverride?: string[] | undefined; // IAM roles to override.
                        preferredRole?: string | undefined; // Preferred role.
                    }
                    | undefined;
            }
            | undefined;
    };
}

/**
 * This type is a deprecated alias for `CognitoUserPoolTriggerEvent`.
 * It is recommended to use specific event types instead.
 *
 * @deprecated Please use specific event types instead
 */
export type C
