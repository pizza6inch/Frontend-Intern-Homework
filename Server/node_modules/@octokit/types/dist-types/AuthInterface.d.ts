import type { EndpointOptions } from "./EndpointOptions";
import type { OctokitResponse } from "./OctokitResponse";
import type { RequestInterface } from "./RequestInterface";
import type { RequestParameters } from "./RequestParameters";
import type { Route } from "./Route";

/**
 * Interface for implementing complex authentication strategies for Octokit.
 * An object implementing the AuthInterface can be directly passed as the
 * `auth` option in the Octokit constructor.
 *
 * For the official implementations of the most common authentication
 * strategies, see https://github.com/octokit/auth.js
 */
export interface AuthInterface<AuthOptions extends any[], Authentication extends any> {
    /**
     * The constructor function for the authentication strategy.
     * Takes in a variable number of arguments `AuthOptions` and returns
     * an authentication object `Authentication`.
     *
     * @param {...AuthOptions} args - A variable number of arguments
     *  used to initialize the authentication strategy.
     * @returns {Promise<Authentication>} A promise that resolves to the
     *  authentication object `Authentication`.
     */
    (...args: AuthOptions): Promise<Authentication>;

    /**
     * A hook that sends a request using the passed `request` instance.
     * The `hook` property is used to intercept and modify requests before
     * they are sent to the server.
     *
     * @param {object} request - The request instance used to send the request.
     * @param {object} options - The endpoint options for the request.
     *  Must set `method` and `url`. Plus URL, query or body parameters,
     *  as well as `headers`, `mediaType.{format|previews}`, `request`,
     *  or `baseUrl`.
     * @returns {Promise<OctokitResponse<T>>} A promise that resolves to the
     *  response object `OctokitResponse<T>`.
     */
    hook: {
        /**
         * Sends a request using the passed `request` instance.
         *
         * @template T The type of the response data.
         * @param {object} request - The request instance used to send the request.
         * @param {object} endpoint - The endpoint options for the request.
         *  Must set `method` and `url`. Plus URL, query or body parameters,
         *  as well as `headers`, `mediaType.{format|previews}`, `request`,
         *  or `baseUrl`.
         * @returns {Promise<OctokitResponse<T>>} A promise that resolves to the
         *  response object `OctokitResponse<T>`.
        
