declare module "ipaddr.js" {
    // Define types for IPv4 and IPv6 range categories
    type IPv4Range = 'unicast' | 'unspecified' | 'broadcast' | 'multicast' | 'linkLocal' | 'loopback' | 'carrierGradeNat' | 'private' | 'reserved';
    type IPv6Range = 'unicast' | 'unspecified' | 'linkLocal' | 'multicast' | 'loopback' | 'uniqueLocal' | 'ipv4Mapped' | 'rfc6145' | 'rfc6052' | '6to4' | 'teredo' | 'reserved';

    // Define a type for a list of ranges with a name
    interface RangeList<T> {
        [name: string]: [T, number] | [T, number][];
    }

    // Define a base class for IPv4 and IPv6 addresses with common methods
    class IP {
        // Calculate prefix length from subnet mask
        prefixLengthFromSubnetMask(): number | null;
        // Convert IP to an array of bytes
        toByteArray(): number[];
        // Convert IP to a normalized string representation
        toNormalizedString(): string;
        // Convert IP to a string representation
        toString(): string;
    }

    // Define a namespace for IP address related functions
    namespace Address {
        // Check if an IP address string is valid
        export function isValid(addr: string): boolean;
        // Create an IP instance from a byte array
        export function fromByteArray(bytes: number[]): IPv4 | IPv6;
        // Parse an IP address string
        export function parse(addr: string): IPv4 | IPv6;
        // Parse a CIDR notation string
        export function parseCIDR(mask: string): [IPv4 | IPv6, number];
        // Process an IP address string
        export function process(addr: string): IPv4 | IPv6;
        // Check if an IP address is within a given range list
        export function subnetMatch(addr: IPv4, rangeList: RangeList<IPv4>, defaultName?: string): string;
        export function subnetMatch(addr: IPv6, rangeList: RangeList<IPv6>, defaultName?: string): string;

        // Define a subclass for IPv4 addresses
        export class IPv4 extends IP {
            // Static methods for IPv4 specific functionality
            static broadcastAddressFromCIDR(addr: string): IPv4;
            static isIPv4(addr: string): boolean;
            static isValidFourPartDecimal(addr: string): boolean;
            static isValid(addr: string): boolean;
            static networkAddressFromCIDR(addr: string): IPv4;
            static parse(addr: string): IPv4;
            static parseCIDR(addr: string): [IPv4, number];
            static subnetMaskFromPrefixLength(prefix: number): IPv4;
            // Constructor for IPv4 instances
            constructor(octets: number[]);
            // Access the raw octets of the IPv4 address
            octets: number[]

            // Get the type of the IP address
            kind(): 'ipv4';
            // Check if the IP address matches another IP address or subnet mask
            match(addr: IPv4, bits: number): boolean;
            match(mask: [IPv4, number]): boolean;
            // Get the range category of the IP address
            range(): IPv4Range;
            // Check if the IP address is within a given range list
            subnetMatch(rangeList: RangeList<IPv4>, defaultName?: string): string;
            // Convert IPv4 to IPv4Mapped IPv6 address
            toIPv4MappedAddress(): IPv6;
        }

        // Define a subclass for IPv6 addresses
        export class IPv6 extends IP {
            // Static methods for IPv6 specific functionality
            static broadcastAddressFromCIDR(addr: string): IPv6;
            static isIPv6(addr: string): boolean;
            static isValid(addr: string): boolean;
            static parse(addr: string): IPv6;
            static parseCIDR(addr: string): [IPv6, number];
            static subnetMaskFromPrefixLength(prefix: number): IPv6;
            // Constructor for IPv6 instances
            constructor(parts: number[]);
            // Access the raw parts of the IPv6 address
            parts: number[]
            // Access the zone ID of the IPv6 address
            zoneId?: string

            // Check if the IP address is an IPv4 mapped IPv6 address
            isIPv4MappedAddress(): boolean;
            // Get the type of the IP address
            kind(): 'ipv6';
            // Check if the IP address matches another IP address or subnet mask
            match(addr: IPv
