// Import necessary modules and functions
import { getUserAgent } from "universal-user-agent";
import { Collection } from "before-after-hook";
import { request } from "@octokit/request";
import { graphql, withCustomRequest } from "@octokit/graphql";
import { createTokenAuth } from "@octokit/auth-token";
import { VERSION } from "./version.js";

// No-operation function, used as a placeholder
const noop = () => {};

// Wrapper for console.warn function
const consoleWarn = console.warn.bind(console);

// Wrapper for console.error function
const consoleError = console.error.bind(console);

// Generates a user-agent trail with the current version and user-agent information
const userAgentTrail = `octokit-core.js/${VERSION} ${getUserAgent()}`;

// The main Octokit class
class Octokit {
  // Static variable to store the version number
  static VERSION = VERSION;

  // Static method to set default values for the Octokit instance
  static defaults(defaults) {
    // Creates a new class that extends the current Octokit class with the provided defaults
    const OctokitWithDefaults = class extends this {
      constructor(...args) {
        // Calls the constructor of the parent class with the merged options
        const options = args[0] || {};
        if (typeof defaults === "function") {
          super(defaults(options));
          return;
        }
        super(
          Object.assign(
            {},
            defaults,
            options,
            options.userAgent && defaults.userAgent ? {
              userAgent: `${options.userAgent} ${defaults.userAgent}`
            } : null
          )
        );
      }
    };
    return OctokitWithDefaults;
  }

  // Static property to store plugins
  static plugins = [];

  // Static method to attach plugins to the Octokit instance
  static plugin(...newPlugins) {
    const currentPlugins = this.plugins;
    const NewOctokit = class extends this {
      static {
        this.plugins = currentPlugins.concat(
          newPlugins.filter((plugin) => !currentPlugins.includes(plugin))
        );
      }
    };
    return NewOctokit;
  }

  // Constructor for the Octokit class
  constructor(options = {}) {
    // Create a new Collection object for hooks
    const hook = new Collection();

    // Default request options
    const requestDefaults = {
      baseUrl: request.endpoint.DEFAULTS.baseUrl,
      headers: {},
      request: Object.assign({}, options.request, {
        // Binds the hook function to the "request" event
        hook: hook.bind(null, "request")
      }),
      mediaType: {
        previews: [],
        format: ""
      }
    };

    // Set the user-agent header
    requestDefaults.headers["user-agent"] = options.userAgent ? `${options.userAgent} ${userAgentTrail}` : userAgentTrail;

    // Set the base URL if provided
    if (options.baseUrl) {
      requestDefaults.baseUrl = options.baseUrl;
    }

    // Set the previews if provided
    if (options.previews) {
      requestDefaults.mediaType.previews = options.previews;
    }

    // Set the time-zone header if provided
    if (options.timeZone) {
      requestDefaults.headers["time-zone"] = options.timeZone;
    }

    // Assign the request function with the default options
    this.request = request.defaults(requestDefaults);

    // Assign the graphql function with the custom request
    this.graphql = withCustomRequest(this.request).defaults(requestDefaults);

    // Assign the log object
    this.log = Object.assign(
      {
        debug: noop,
        info: noop,
        warn: consoleWarn,
        error: consoleError
      },
      options.log
    );

    // Assign the hook object
    this.hook = hook;

    // Set the authentication strategy
    if (!options.authStrategy) {
      if (!options.auth) {
        // If no authentication is provided, set the authentication type to "unauthenticated"
        this.auth = async () => ({
          type: "unauthenticated"
        });
      } else {
        // Create a new authentication object with the provided token
        const auth = createTokenAuth(options.auth);

        // Wrap the request function with the authentication hook
        hook.wrap("request", auth.hook);

        // Assign the authentication object
        this.auth = auth;
      }
    } else {
      const { authStrategy, ...otherOptions } = options;

      // Create a new authentication object with the provided authentication strategy
      const auth = authStrategy(
        Object.assign(
          {
            request: this.request,
            log: this.log,
            // Pass the current octokit instance and its constructor options to the authentication strategy
            octokit: this,
            octokitOptions: otherOptions
          },
          options.auth
        )
      );

      // Wrap the request function with the authentication hook
      hook.wrap("request", auth.hook);

      // Assign the authentication object
      this.auth = auth;
    }

    // Loop through the plugins and extend the current instance with their functionality
    const classConstructor = this.constructor;
    for (let i = 0; i < classConstructor.plugins.length; ++i) {
      Object.assign(this, classConstructor.plugins[i](this, options));
    }
  }
}

// Export the Octokit class
export { Octokit };
