// pkg/dist-src/index.js
import BottleneckLight from "bottleneck/light";
import { Octokit } from "@octokit/core";

// Import the VERSION from version.js
import { VERSION } from "./version";

// Import the wrapRequest function and doRequest function from wrap-request.js
import { wrapRequest, doRequest } from "./wrap-request";

// Import the triggers_notification_paths_default array from generated/triggers-notification-paths.js
import triggers_notification_paths_default from "./generated/triggers-notification-paths";

// Import the routeMatcher function from route-matcher.js
import { routeMatcher } from "./route-matcher";

// Define the VERSION at the top of the file for easy access
const VERSION = "8.2.0";

// Define the triggersNotification function using the routeMatcher function and the triggers_notification_paths_default array
const triggersNotification = routeMatcher(triggers_notification_paths_default).test.bind(routeMatcher(triggers_notification_paths_default));

// Define the groups object with several Bottleneck.Group instances
const groups = {};

// Define the createGroups function which initializes the groups object
function createGroups(Bottleneck, common) {
  groups.global = new Bottleneck.Group({
    id: "octokit-global",
    maxConcurrent: 10,
    ...common
  });
  groups.search = new Bottleneck.Group({
    id: "octokit-search",
    maxConcurrent: 1,
    minTime: 2e3,
    ...common
  });
  groups.write = new Bottleneck.Group({
    id: "octokit-write",
    maxConcurrent: 1,
    minTime: 1e3,
    ...common
  });
  groups.notifications = new Bottleneck.Group({
    id: "octokit-notifications",
    maxConcurrent: 1,
    minTime: 3e3,
    ...common
  });
}

// Define the throttling function which takes an octokit instance and octokitOptions as arguments
function throttling(octokit, octokitOptions) {
  // Destructure the throttle options from octokitOptions
  const {
    enabled = true,
    Bottleneck = BottleneckLight,
    id = "no-id",
    timeout = 1e3 * 60 * 2,
    // Redis TTL: 2 minutes
    connection
  } = octokitOptions.throttle || {};

  // If throttling is not enabled, return an empty object
  if (!enabled) {
    return {};
  }

  // Define the common options for the Bottleneck.Group instances
  const common = { connection, timeout };

  // If the groups object has not been initialized, call the createGroups function
  if (groups.global == null) {
    createGroups(Bottleneck, common);
 
