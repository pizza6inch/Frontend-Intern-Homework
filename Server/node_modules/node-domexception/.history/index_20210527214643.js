/*!
 * node-domexception. MIT License. Jimmy WÃ¤rting <https://jimmy.warting.se/opensource>
 *
 * This module provides a polyfill for the DOMException global object in Node.js.
 * It checks if the DOMException object is already available in the globalThis
 * object. If not, it attempts to create a MessageChannel and post an ArrayBuffer
 * through it. If this results in a DOMException, it assigns the constructor to
 * the globalThis.DOMException property.
 */

if (!globalThis.DOMException) {
  // Check if the DOMException object is already available in the globalThis object

  try {
    // Attempt to create a MessageChannel and post an ArrayBuffer through it
    const { MessageChannel } = require('worker_threads'),
          port = new MessageChannel().port1,
          ab = new ArrayBuffer()
    port.postMessage(ab, [ab, ab])
  } catch (err) {
    // If a DOMException is caught, assign the constructor to the globalThis.DOMException property
    if (err.constructor.name === 'DOMException') {
      globalThis.DOMException = err.constructor
    }
  }
}

// Export the globalThis.DOMException object
module.exports = globalThis.DOMException


const  { MessageChannel } = require('worker_threads')

// Define an async function that creates a MessageChannel and posts an ArrayBuffer through it
async function hello() {
  const port = new MessageChannel().port1
  const ab = new ArrayBuffer()
  port.postMessage(ab, [ab, ab])
}

// Call the hello function and handle any errors
hello().catch(err => {
  // Assert that the error is an instance of DOMException and has the correct name and code properties
  console.assert(err.name === 'DataCloneError')
  console.assert(err.code === 25)
  console.assert(err instanceof DOMException)
})

// Create two new DOMException objects with different name and code properties
const e1 = new DOMException('Something went wrong', 'BadThingsError
