// Importing necessary types from "../handler"
import { Callback, Handler } from "../handler";

// Defining custom types for Lex handler and callback functions
export type LexHandler = Handler<LexEvent, LexResult>;
export type LexCallback = Callback<LexResult>;

// Interface for LexEventSlots, an object with string keys and string, undefined, or null values
export interface LexEventSlots {
    [name: string]: string | undefined | null;
}

// Interface for LexEventSessionAttributes, an object with string keys and string values
export interface LexEventSessionAttributes {
    [key: string]: string | undefined;
}

// Interface for LexEventRequestAttributes, an object with string keys and string values
export interface LexEventRequestAttributes {
    [key: string]: string | undefined;
}

// LexEvent interface, representing the event object sent by Amazon Lex
export interface LexEvent {
    // currentIntent contains information about the user's current intent
    currentIntent: {
        name: string; // Intent name
        slots: LexEventSlots; // Slots associated with the intent
        slotDetails: LexSlotDetails; // Details about the resolved slots
        confirmationStatus: "None" | "Confirmed" | "Denied"; // User's confirmation status
    };
    bot: {
        name: string; // Bot name
        alias: string; // Bot alias
        version: string; // Bot version
    };
    userId: string; // User ID
    inputTranscript: string; // User's input text
    invocationSource: "DialogCodeHook" | "FulfillmentCodeHook"; // The source of the invocation
    outputDialogMode: "Text" | "Voice"; // The output mode for the response
    messageVersion: "1.0"; // The version of the message format
    sessionAttributes: LexEventSessionAttributes; // Attributes associated with the session
    requestAttributes: LexEventRequestAttributes | null; // Attributes associated with the request
}

// Interface for LexSlotResolution, representing a single resolved slot value
export interface LexSlotResolution {
    value: string; // The resolved slot value
}

// Interface for LexSlotDetail, representing a single slot detail
export interface LexSlotDetail {
    // "at least 1 but no more than 5 items"
    resolutions: [LexSlotResolution, LexSlotResolution?, LexSlotResolution?, LexSlotResolution?, LexSlotResolution?]; // An array of slot resolutions
    originalValue: string; // The original user input for the slot
}

// Interface for LexSlotDetails, representing the details of all slots
export interface LexSlotDetails {
    [name: string]: LexSlotDetail; // An object with slot names as keys and slot details as values
}

// Interface for LexGenericAttachment, representing a generic attachment for a response card
export interface LexGenericAttachment {
    title: string; // The attachment title
    subTitle: string; // The attachment subtitle
    imageUrl: string; // The URL for the attachment image
    attachmentLinkUrl: string; // The URL for the attachment link
    buttons: Array<{ // An array of buttons for the attachment
        text: string; // The button text
        value: string; // The button value
    }>;
}

// Base interface for LexDialogActionBase, representing a base dialog action
export interface LexDialogActionBase {
    type: "Close" | "ElicitIntent" | "ElicitSlot" | "ConfirmIntent"; // The type of dialog action
    message?: // An optional message object
        | {
            contentType: "PlainText" | "SSML" | "CustomPayload"; // The content type of the message
            content: string; // The message content
        }
        | undefined;
    responseCard?: // An optional response card object
        | {
            version: number; // The version of the response card format
            contentType: "application/vnd.amazonaws.card.generic"; // The content type of the response card
            genericAttachments: LexGenericAttachment[]; // An array of generic attachments
        }
        | undefined;
}

// Interface for LexDialogActionClose, representing a "Close" dialog action
export interface LexDialogActionClose extends LexDialogActionBase {
    type: "Close"; // The type of dialog action
    fulfillmentState: "Fulfilled" | "Failed"; // The fulfillment state of the intent
}

// Interface for LexDialogActionElicitIntent, representing an "ElicitIntent" dialog action
export interface LexDialogActionElicitIntent extends LexDialogActionBase {
    type: "ElicitIntent"; // The type of dialog action
}

// Interface for LexDialogActionElicitSlot, representing an "ElicitSlot" dialog action
export interface LexDialogActionElicitSlot extends LexDialogActionBase {
    type: "ElicitSlot"; // The type of dialog action
    intentName: string; // The name of the intent
    slots: { [name: string]: string | null }; // The slots associated with the intent
    slotToElicit: string; // The slot to elicit
}

// Interface for LexDialogActionConfirmIntent, representing a "ConfirmIntent" dialog action
export interface LexDialogActionConfirmIntent extends LexDialogActionBase {
    type: "ConfirmIntent"; // The type of dialog action
    intentName: string; // The name of the intent
    slots: { [name: string]: string | null
