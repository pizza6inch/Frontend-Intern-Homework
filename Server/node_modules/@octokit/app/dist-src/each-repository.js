import { composePaginateRest } from "@octokit/plugin-paginate-rest";
import { Octokit } from "@octokit/core";
import { App } from "./index";

// eachRepositoryFactory function returns an object with two methods:
// eachRepository and iterator. It takes an app object as a parameter.
function eachRepositoryFactory(app) {
  return Object.assign(eachRepository.bind(null, app), {
    iterator: eachRepositoryIterator.bind(null, app)
  });
}

// The eachRepository function takes an app object, a queryOrCallback function,
// and an optional callback function as parameters. It iterates over each
// repository in the installation and applies the callback or queryOrCallback
// function to each repository.
async function eachRepository(app, queryOrCallback, callback) {
  const i = eachRepositoryIterator(
    app,
    callback ? queryOrCallback : void 0
  )[Symbol.asyncIterator]();
  let result = await i.next();
  while (!result.done) {
    if (callback) {
      await callback(result.value);
    } else {
      await queryOrCallback(result.value);
    }
    result = await i.next();
  }
}

// singleInstallationIterator function returns an async iterator that yields
// an object containing an octokit instance for a given installation.
function singleInstallationIterator(app, installationId) {
  return {
    async *[Symbol.asyncIterator]() {
      yield {
        octokit: await app.getInstallationOctokit(installationId)
      };
    }
  };
}

// eachRepositoryIterator function returns an async iterator that yields an
// object containing an octokit instance and a repository object for each
// repository in the installation.
function eachRepositoryIterator(app, query) {
  return {
    async *[Symbol.asyncIterator]() {
      const iterator = query ? singleInstallationIterator(app, query.installationId) : app.eachInstallation.iterator();
      for await (const { octokit } of iterator) {
        const repositoriesIterator = composePaginateRest.iterator(
          octokit,
          "GET /installation/repositories"
        );
        for await (const { data: repositories } of repositoriesIterator) {
          for (const repository of repositories) {
            yield { octokit, repository };
          }
        }
      }
    }
  };
}

// Export eachRepository, eachRepositoryFactory, and eachRepositoryIterator
// functions for use in other modules.
export {
  eachRepository,
  each
