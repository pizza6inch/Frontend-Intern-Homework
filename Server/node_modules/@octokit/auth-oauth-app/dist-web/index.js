// pkg/dist-src/index.js
import { getUserAgent } from "universal-user-agent";
import { request } from "@octokit/request";

// Import and initialize the `auth` and `hook` functions along with their dependencies.
// The `auth` function is responsible for creating authentication objects for Octokit.
// The `hook` function is a middleware function that sets up basic authentication for requests.

// pkg/dist-src/auth.js
import btoa from "btoa-lite";
import { createOAuthUserAuth } from "@octokit/auth-oauth-user";

// Import the `btoa` package for encoding the client ID and client secret.
// Import the `createOAuthUserAuth` function from the `@octokit/auth-oauth-user` package.

// The `auth` function takes in a `state` object, which contains the client ID and client secret,
// and an `authOptions` object, which contains the type of authentication and any additional options.
// If the type of authentication is "oauth-app", the function returns an authentication object
// with the client ID, client secret, client type, and authorization headers.
// If the "factory" property is present in `authOptions`, the function calls the factory function
// with the provided options and returns the result.
// Otherwise, the function creates an authentication object using the `createOAuthUserAuth` function
// and returns it.

async function auth(state, authOptions) {
  // ...
}

// pkg/dist-src/hook.js
import btoa2 from "btoa-lite";
import { requiresBasicAuth } from "@octokit/auth-oauth-user";

// Import the `btoa` package for encoding the client ID and client secret.
// Import the `requiresBasicAuth` function from the `@octokit/auth-oauth-user` package.

// The `hook` function takes in a `state` object, which contains the client ID and client secret,
// a `request2` object, a `route`, and `parameters`.
// The function sets up basic authentication for the request by encoding the client ID and client secret
// and adding them to the headers of the endpoint.
// If the client type is "github-app" and the endpoint does not require basic authentication,
// the function throws an error.
// The function then sends the request with the updated endpoint and returns the response.
// If the request fails with a 401 status code, the function throws an error with a custom message.

async function hook(state, request2, route, parameters) {
  // ...
}

// pkg/dist-src/version.js
var VERSION = "7.0.1";

// Export the version number as a variable.

// pkg/dist-src/index.js
import { createOAuthUserAuth as createOAuthUserAuth2 } from "@octokit/auth-oauth-user";

// Import the `createOAuthUserAuth` function from the `@octokit/auth-oauth-user` package.

// The `createOAuthAppAuth` function takes in an `options` object and returns an authentication object
// with the `auth` and `hook` functions bound to the `state` object.
// The `auth` function is responsible for creating authentication objects for Octokit.
// The `hook` function is a middleware function that sets up basic authentication for requests.

function createOAuthAppAuth(options) {
  // ...
}

// Export the `createOAuthAppAuth` and `createOAuthUserAuth` functions.
export { createOAuthAppAuth, createOAuthUserAuth2 as createOAuthUserAuth };
