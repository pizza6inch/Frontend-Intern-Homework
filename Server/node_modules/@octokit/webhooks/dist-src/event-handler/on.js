import { emitterEventNames } from "../generated/webhook-names.js";

// handleEventHandlers function takes in a state object, a webhook name, and a handler function
// It checks if there is already a hooks array for the given webhook name in the state object
// If there isn't, it creates one and pushes the handler function to it
function handleEventHandlers(state, webhookName, handler) {
  // Check if there is a hooks array for the given webhook name in the state object
  if (!state.hooks[webhookName]) {
    // If not, create one and push the handler function to it
    state.hooks[webhookName] = [handler];
  } else {
    // If there is already a hooks array for the given webhook name, simply push the handler function to it
    state.hooks[webhookName].push(handler);
  }
}

// receiverOn function takes in a state object, an array of webhook names or a single webhook name, and a handler function
// If an array of webhook names is passed, it will iterate over each name and call receiverOn for each one with the same handler function
// If the webhook name is "*" or "error", it will throw an error with a message indicating that the specific Webhooks.on() method should be used instead
// If the webhook name is not a known webhook name, it will log a warning message
// Otherwise, it will call handleEventHandlers with the state object, webhook name, and handler function
function receiverOn(state, webhookNameOrNames, handler) {
  if (Array.isArray(webhookNameOrNames)) {
    webhookNameOrNames.forEach((webhookName) => receiverOn(state, webhookName, handler));
    return;
  }

  if (["*", "error"].includes(webhookNameOrNames)) {
    const webhookName = webhookNameOrNames === "*" ? "any" : webhookNameOrNames;
    const message = `Using the "${webhookNameOrNames}" event with the regular Webhooks.on() function is not supported. Please use the Webhooks.on${webhookName.charAt(0).toUpperCase() + webhookName.slice(1)}() method instead`;
    throw new Error(message);
  }
