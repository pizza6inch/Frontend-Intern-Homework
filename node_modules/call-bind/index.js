'use strict';

// Import required modules
var bind = require('function-bind');
var GetIntrinsic = require('get-intrinsic');
var setFunctionLength = require('set-function-length');

// Import error classes
var $TypeError = require('es-errors/type');

// Import built-in functions
var $apply = GetIntrinsic('%Function.prototype.apply%');
var $call = GetIntrinsic('%Function.prototype.call%');
var $reflectApply = GetIntrinsic('%Reflect.apply%', true) || bind.call($call, $apply);

// Import other utility functions
var $defineProperty = require('es-define-property');
var $max = GetIntrinsic('%Math.max%');

// The main function to be exported
module.exports = function callBind(originalFunction) {
  // Check if the input is a function
  if (typeof originalFunction !== 'function') {
    throw new $TypeError('a function is required');
  }

  // Create a new function with bound arguments using the bind function
  var func = $reflectApply(bind, $call, arguments);

  // Set the length of the new function
  return setFunctionLength(
    func,
    1 + $max(0, originalFunction.length - (arguments.length - 1)),
    true
  );
};

// A helper function for applying the bound function
var applyBind = function applyBind() {
  return $reflectApply(bind, $apply, arguments);
};

// Define the apply property on the exported object
if ($defineProperty) {
  $defineProperty(module.exports, 'apply', { value: applyBind });
} else {
  // If defineProperty is not available, just assign the apply property
  module.exports.apply = applyBind;
}
