/*!
 * unpipe
 * Copyright(c) 2015 Douglas Christopher Wilson
 * MIT Licensed
 */

'use strict'

/**
 * Module exports.
 * @public This function is the main export of this module and can be used by other modules.
 */

module.exports = unpipe

/**
 * Determine if there are Node.js pipe-like data listeners.
 * @private This function is used internally and is not intended to be used by other modules.
 */

function hasPipeDataListeners(stream) {
  var listeners = stream.listeners('data') // Get the listeners for the 'data' event

  for (var i = 0; i < listeners.length; i++) { // Iterate over the listeners
    if (listeners[i].name === 'ondata') { // Check if the listener is a pipe-like data listener
      return true
    }
  }

  return false
}

/**
 * Unpipe a stream from all destinations.
 *
 * @param {object} stream - The stream to be unpiped.
 * @public This function is intended to be used by other modules.
 */

function unpipe(stream) {
  if (!stream) { // Check if a stream is provided
    throw new TypeError('argument stream is required') // Throw an error if no stream is provided
  }

  if (typeof stream.unpipe === 'function') {
    // new-style
    stream.unpipe() // Unpipe the stream if the 'unpipe' method is available
    return
  }

  // Node.js 0.8 hack
  if (!hasPipeDataListeners(stream)) { // Check if there are any pipe-like data listeners
    return
  }

  var listener
  var listeners = stream.listeners('close') // Get the listeners for the 'close' event

  for (var i = 0; i < listeners.length; i++) { // Iterate over the listeners
    listener = listeners[i] // Get the current listener

    if (listener.name !== 'cleanup' && listener.name !== 'onclose') {
      //
