/**
 * Module dependencies.
 */
// This line indicates that the 'crypto' module is being required for use in this file.
// The 'crypto' module is a built-in module in Node.js that provides cryptographic functionality.

var crypto = require('crypto');

/**
 * Sign the given `val` with `secret`.
 *
 * @param {String} val - The value to be signed.
 * @param {String} secret - The secret string used to sign the value.
 * @return {String} - The signed value.
 * @api private - This function is intended for internal use within this module.
 */
// This function signs the given value (val) with the provided secret string.
// It returns the signed value as a string.
// This function throws a TypeError if the value or secret is not a string.

exports.sign = function(val, secret){
  if ('string' != typeof val) throw new TypeError("Cookie value must be provided as a string.");
  if ('string' != typeof secret) throw new TypeError("Secret string must be provided.");
  return val + '.' + crypto
    .createHmac('sha256', secret)
    .update(val)
    .digest('base64')
    .replace(/\=+$/, '');
};

/**
 * Unsign and decode the given `val` with `secret`,
 * returning `false` if the signature is invalid.
 *
 * @param {String} val - The signed value to be unsigned.
 * @param {String} secret - The secret string used to sign the value.
 * @return {String|Boolean} - The decoded value or false if the signature is invalid.
 * @api private - This function is intended for internal use within this module.
 */
// This function takes a signed value (val) and the secret string used to sign it.
// It returns the decoded value as a string if the signature is valid, or false otherwise.
// This function throws a TypeError if the value or secret is not a string.

exports.unsign = function(val, secret){
  if ('string' != typeof val) throw new TypeError("Signed
