// Import required modules
import {File} from 'fetch-blob/from.js';
import {FormData} from 'formdata-polyfill/esm.min.js';

// Define constants and helper functions
// ...

class MultipartParser {
  /**
   * Create a new MultipartParser instance
   * @param {string} boundary - The boundary string used in the multipart data
   */
  constructor(boundary) {
    // Initialize instance variables
    // ...

    // Define the boundary characters as a lookup object
    this.boundaryChars = {};
    const boundaryCharsArr = Array.from(this.boundary);
    for (let i = 0; i < boundaryCharsArr.length; i++) {
      this.boundaryChars[boundaryCharsArr[i]] = true;
    }

    // Define various state constants
    // ...
  }

  /**
   * Write data to the parser
   * @param {Uint8Array} data - The data to write
   */
  write(data) {
    // Implement the state machine for parsing the multipart data
    // ...
  }

  /**
   * Finalize parsing and process any remaining data
   */
  end() {
    // Perform final processing and clean up
    // ...
  }
}

// Utility function for extracting the filename from a Content-Disposition header
function _fileName(headerValue) {
  // ...
}

/**
 * Convert a multipart data stream into a FormData object
 * @param {import('stream').ReadableStream<Uint8Array>} Body - The multipart data stream
 * @param {string} ct - The Content-Type header value
 * @returns {Promise<FormData>} - A Promise that resolves to a FormData object
 */
export async function toFormData(Body, ct) {
  // Validate input and initialize variables
  // ...

  // Create a new MultipartParser instance
  const parser = new MultipartParser(boundary);

  // Define event handlers for the parser
  // ...

  // Decode the incoming data and handle events
  for await (const chunk of Body) {
    parser.write(chunk);
  }

  parser.end();

  return formData;
}
