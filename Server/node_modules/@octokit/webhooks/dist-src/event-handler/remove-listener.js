// Function to remove a listener from the state object
function removeListener(state, webhookNameOrNames, handler) {
  // Check if webhookNameOrNames is an array
  if (Array.isArray(webhookNameOrNames)) {
    // If it is, loop through the array and recursively call removeListener for each element
    webhookNameOrNames.forEach(
      (webhookName) => removeListener(state, webhookName, handler)
    );
    // Return after the loop, as no further action is needed
    return;
  }
  
  // Check if the webhookNameOrNames exists in the state.hooks object
  if (!state.hooks[webhookNameOrNames]) {
    // If it doesn't, return without taking any further action
    return;
  }
  
  // Loop through the array of handlers for the given webhookNameOrNames
  for (let i = state.hooks[webhookNameOrNames].length - 1; i >= 0; i--) {
    // Check if the current handler matches the one passed as an argument
    if (state.hooks[webhookNameOrNames][i] === handler) {
      // If it does, splice it out of the array
      state.hooks[webhookNameOrNames].splice(i, 1);
      // Return after splicing, as no further action is needed
      return;
    }
  }
}

// Export the removeListener function for use in other modules
export {
  removeListener
};
