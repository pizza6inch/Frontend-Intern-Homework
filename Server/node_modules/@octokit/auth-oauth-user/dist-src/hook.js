// Import required modules: btoa-lite for encoding credentials,
// auth for authentication, and requires-basic-auth for checking if basic authentication is required.
import btoa from "btoa-lite";
import { auth } from "./auth";
import { requiresBasicAuth } from "./requires-basic-auth";

// The main hook function that handles authentication for different endpoints.
async function hook(state, request, route, parameters = {}) {
  // Merge the request endpoint with the route and parameters.
  const endpoint = request.endpoint.merge(route, parameters);

  // Check if the endpoint is a login endpoint and return the request as is.
  if (/\/login\/(oauth\/access_token|device\/code)$/.test(endpoint.url)) {
    return request(endpoint);
  }

  // If basic authentication is required, encode the clientId and clientSecret and add it to the headers.
  if (requiresBasicAuth(endpoint.url)) {
    const credentials = btoa(`${state.clientId}:${state.clientSecret}`);
    endpoint.headers.authorization = `basic ${credentials}`;
    return request(endpoint);
  }

  // If the client type is oauth-app, authenticate using the auth function and add the token to the headers.
  if (state.clientType === "oauth-app") {
    const { token } = await auth({ ...state, request });
    endpoint.headers.authorization = "token " + token;
    return request(endpoint);
  }

  // Authenticate using the auth function and add the token to the headers for other client types.
  const { token } = await auth({ ...state, request });
  endpoint.headers.authorization = "token " + token;
  return request(endpoint);
}

// Export the hook function for use in other modules.
export { hook };
