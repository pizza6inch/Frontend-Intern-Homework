/*!
 * destroy
 * Copyright(c) 2014 Jonathan Ong
 * Copyright(c) 2015-2022 Douglas Christopher Wilson
 * MIT Licensed
 */

'use strict'

/**
 * Module dependencies.
 * @private
 */
// The code requires the 'events', 'fs', 'stream', and 'zlib' modules.
// These modules are used to handle events, file streams, generic streams,
// and compressed streams, respectively.

var EventEmitter = require('events').EventEmitter
var ReadStream = require('fs').ReadStream
var Stream = require('stream')
var Zlib = require('zlib')

/**
 * Module exports.
 * @public
 */
// The 'destroy' function is exported as the default export of the module.

module.exports = destroy

/**
 * Destroy the given stream, and optionally suppress any future `error` events.
 *
 * @param {object} stream
 * @param {boolean} suppress
 * @public
 */

function destroy (stream, suppress) {
  // If the stream is a ReadStream from the 'fs' module, destroy it.
  if (isFsReadStream(stream)) {
    destroyReadStream(stream)
  }
  // If the stream is a Zlib stream, destroy it.
  else if (isZlibStream(stream)) {
    destroyZlibStream(stream)
  }
  // If the stream has a 'destroy' method, call it.
  else if (hasDestroy(stream)) {
    stream.destroy()
  }

  // If the stream is an EventEmitter and 'suppress' is true, remove all
  // existing 'error' listeners, and add a new 'error' listener that does nothing.
  if (isEventEmitter(stream) && suppress) {
    stream.removeAllListeners('error')
    stream.addListener('error', noop)
  }

  // Return the stream.
  return stream
}

/**
 * Destroy a ReadStream.
 *
 * @param {object} stream
 * @private
 */

function destroyReadStream (stream) {
  // Call the 'destroy' method of the stream.
  stream.destroy()

  // If the 'close' method of the stream is a function, add an 'open' listener
  // that closes the stream when it is called.
  if (typeof stream.close === 'function') {
    stream.on('open', onOpenClose)
  }
}

/**
 * Close a Zlib stream.
 *
 * Zlib streams below Node.js 4.5.5 have a buggy implementation
 * of .close() when zlib encountered an error.
 *
 * @param {object} stream
 * @private
 */

function closeZlibStream (stream) {
  // If the stream has a '_hadError' property set to true, and a '_binding'
  // property or a '_handle' property, set the '_binding' or '_handle'
  // property to an object with a 'close' method that does nothing.
  if (stream._hadError === true) {
    var prop = stream._binding === null
      ? '_binding'
      : '_handle'

    stream[prop] = {
      close: function () { this[prop] = null }
    }
  }

  // Call the 'close' method of the stream.
  stream.close()
}

/**
 * Destroy a Zlib stream.
 *
 * Zlib streams don't have a destroy function in Node.js 6. On top of that
 * simply calling destroy on a zlib stream in Node.js 8+ will result in a
 * memory leak. So until that is fixed, we need to call both close AND destroy.
 *
 * PR to fix memory leak: https://github.com/nodejs/node/pull/23734
 *
 * In Node.js 6+8, it's important that destroy is called before close as the
 * stream would otherwise emit the error 'zlib binding closed'.
 *
 * @param {object} stream
 * @private
 */

function destroyZlibStream (stream) {
  // If the 'destroy' method of the stream is a function, call it.
  if (typeof stream.destroy === 'function') {
    // If the stream has a '_binding' property, call the 'destroy' method
    // of the stream and clear the '_binding' property if the stream
    // is currently processing data.
    if (stream._binding) {
      // node.js < 0.10.0
      stream.destroy()
      if (stream._processing) {
        stream._needDrain = true
        stream.once('drain', onDrainClearBinding)
      } else {
        stream._binding.clear()
      }
    }
    // If the stream has a '_destroy' property that is not the same as
    // the '_destroy' property of the Stream.Transform prototype, call
    // the 'destroy' method of the stream.
    else if (stream._destroy && stream._destroy !== Stream.Transform.prototype._destroy) {
      // node.js >= 12, ^11.1.0, ^10.15.1
      stream.destroy()
    }
    // If the stream has a '_destroy' property and a 'close' method, set
    // the 'destroyed' property of the stream to true and call the 'close'
    // method of the stream.
    else if (stream._destroy && typeof stream.close === 'function') {
      // node.js 7, 8
      stream.destroyed = true
      stream.close()
    }
    // Otherwise, call the 'destroy' method of the stream.
    else {
      // fallback
      // istanbul ignore next
      stream.destroy()
    }
  }
  // If the 'close' method of the stream is a function, call the 'closeZlibStream'
  // function with the stream as an argument.
  else if (typeof stream.close === 'function') {
    // node.js < 8 fallback
    closeZlibStream(stream)
  }
}

/**
 * Determine if stream has destroy.
 * @private
 */

function hasDestroy (stream) {
  // Return true if the stream is an instance of the
