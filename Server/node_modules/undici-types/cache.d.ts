// Import necessary types for RequestInfo, Response, and Request interfaces from './fetch' module.
import type { RequestInfo, Response, Request } from './fetch'

// Define the CacheStorage interface which represents the CacheStorage object.
// This object provides methods to manipulate the service worker's cache.
export interface CacheStorage {
  // The match() method returns a promise that resolves to the cached response for the given request,
  // if it exists, or undefined if there is no match.
  match(request: RequestInfo, options?: MultiCacheQueryOptions): Promise<Response | undefined>

  // The has() method returns a promise that resolves to true if the given cache name exists,
  // or false if it does not.
  has(cacheName: string): Promise<boolean>

  // The open() method returns a promise that resolves to a Cache object,
  // representing the given cache name.
  open(cacheName: string): Promise<Cache>

  // The delete() method returns a promise that resolves to true if the given cache name is successfully deleted,
  // or false if it does not exist.
  delete(cacheName: string): Promise<boolean>

  // The keys() method returns a promise that resolves to an array of cache names.
  keys(): Promise<string[]>
}

// Declare CacheStorage constructor with a prototype that has the CacheStorage interface methods.
declare const CacheStorage: {
  prototype: CacheStorage
  new(): CacheStorage
}

// Define the Cache interface which represents a single cache.
// This object provides methods to manipulate the service worker's cache.
export interface Cache {
  // The match() method returns a promise that resolves to the cached response for the given request,
  // if it exists, or undefined if there is no match.
  match(request: RequestInfo, options?: CacheQueryOptions): Promise<Response | undefined>

  // The matchAll() method returns a promise that resolves to an array of cached responses,
  // if any, that match the given request.
  matchAll(request?: RequestInfo, options?: CacheQueryOptions): Promise<readonly Response[]>

  // The
