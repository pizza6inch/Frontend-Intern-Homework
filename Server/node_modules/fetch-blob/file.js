// Import Blob class from './index.js'
import Blob from './index.js'

// Define a new class File that extends Blob
const _File = class File extends Blob {
  // Private properties #lastModified and #name
  #lastModified = 0
  #name = ''

  /**
   * File constructor with 3 parameters: fileBits, fileName, and options
   * @param {*[]} fileBits - Array of array items or array-like object
   * @param {string} fileName - The name of the file
   * @param {{lastModified?: number, type?: string}} options - Options object
   * @throws {TypeError} If not enough arguments are provided
   */
  constructor (fileBits, fileName, options = {}) {
    // Validate the number of arguments
    if (arguments.length < 2) {
      throw new TypeError(`Failed to construct 'File': 2 arguments required, but only ${arguments.length} present.`)
    }
    // Call Blob constructor with fileBits and options
    super(fileBits, options)

    // If options is null, set it to an empty object
    if (options === null) options = {}

    // Simulate WebIDL type casting for NaN value in lastModified option
    const lastModified = options.lastModified === undefined ? Date.now() : Number(options.lastModified)
    if (!Number.isNaN(lastModified)) {
      // Set the #lastModified property
      this.#lastModified = lastModified
    }

    // Set the #name property
    this.#name = String(fileName)
  }

  /**
   * Getter for the #name property
   * @returns {string} The name of the file
   */
  get name () {
    return this.#name
  }

  /**
   * Getter for the #lastModified property
   * @returns {number} The last modified timestamp
   */
  get lastModified () {
    return this.#lastModified
  }

  /**
   * Getter for the [Symbol.toStringTag] property
   * @returns {string}
