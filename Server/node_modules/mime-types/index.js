/*!
 * mime-types
 * Copyright(c) 2014 Jonathan Ong
 * Copyright(c) 2015 Douglas Christopher Wilson
 * MIT Licensed
 */

'use strict'

/**
 * Module dependencies.
 * This section documents the required modules used in this file.
 * @private
 */

// mime-db provides the MIME type data
var db = require('mime-db')

// path.extname extracts the file extension from a path
var extname = require('path').extname

/**
 * Module variables.
 * These variables are used within this module.
 * @private
 */

/**
 * Regular expression used to extract the MIME type from a string.
 * It matches the first non-whitespace, non-semicolon character sequence.
 */
var EXTRACT_TYPE_REGEXP = /^\s*([^;\s]*)(?:;|\s|$)/

/**
 * Regular expression used to match text-based MIME types.
 */
var TEXT_TYPE_REGEXP = /^text\//i

/**
 * Module exports.
 * These functions are available for external use.
 * @public
 */

// charset returns the default charset for a given MIME type
exports.charset = charset

// charsets is an alias for charset
exports.charsets = { lookup: charset }

// contentType creates a full Content-Type header given a MIME type or extension
exports.contentType = contentType

// extension returns the default extension for a given MIME type
exports.extension = extension

// extensions is an empty object that will be populated with MIME type to extension mappings
exports.extensions = Object.create(null)

// types is an empty object that will be populated with extension to MIME type mappings
exports.types = Object.create(null)

// populateMaps initializes the extensions and types maps using data from mime-db
populateMaps(exports.extensions, exports.types)

/**
 * Get the default charset for a MIME type.
 *
 * @param {string} type - The MIME type to retrieve the charset for
 * @return {boolean|string} - The charset or false if the type is invalid
 */

function charset (type) {
  // Validate the input
  if (!type || typeof type !== 'string') {
    return false
  }

  // Extract the MIME type from the input string
  var match = EXTRACT_TYPE_REGEXP.exec(type)

  // Retrieve the MIME type data from mime-db
  var mime = match && db[match[1].toLowerCase()]

  // Return the charset if it exists, otherwise return false
  if (mime && mime.charset) {
    return mime.charset
  }

  // If the MIME type is text-based, return the default charset (UTF-8)
  if (match && TEXT_TYPE_REGEXP.test(match[1])) {
    return 'UTF-8'
  }

  return false
}

/**
 * Create a full Content-Type header given a MIME type or extension.
 *
 * @param {string} str - The MIME type or extension to create the Content-Type header for
 * @return {boolean|string} - The Content-Type header or false if the input is invalid
 */

function contentType (str) {
  // Validate the input
  if (!str || typeof str !== 'string') {
    return false
  }

  // Determine the MIME type based on the input
  var mime = str.indexOf('/') === -1
    ? exports.lookup(str)
    : str

  // Return false if the MIME type is invalid
  if (!mime) {
    return false
  }

  // Add the charset to the MIME type if it's not already present
  if (mime.indexOf('charset') === -1) {
    var charset = exports.charset(mime)
    if (charset) mime += '; charset=' + charset.toLowerCase()
  }

  // Return the Content-Type header
  return mime
}

/**
 * Get the default extension for a MIME type.
 *
 * @param {string} type - The MIME type to retrieve the extension for
 * @return {boolean|string} - The extension or false if the type is invalid
 */

function extension (type) {
  // Validate the input
  if (!type || typeof type !== 'string') {
    return false
  }

  // Extract the MIME type from the input string
  var match = EXTRACT_TYPE_REGEXP.exec(type)

  // Retrieve the extensions for the MIME type
  var exts = match && exports.extensions[match[1].toLowerCase()]

  // Return the first extension or false if there are no extensions
  if (!exts || !exts.length) {
    return false
  }

  return exts[0]
}

/**
 * Lookup the MIME type for a file path/extension.
 *
 * @param {string} path - The file path or extension to retrieve the MIME type for
 * @return {boolean|string} - The MIME type or false if the path is invalid
 */

function lookup (path) {
  // Validate the input
  if (!path || typeof path !== 'string') {
    return false
  }

  // Extract the file extension from the path
  var extension = extname('x.' + path)
    .toLowerCase()
    .substr(1)

  // Return false if there is no extension
  if (!extension) {
    return false
  }

  // Retrieve the MIME type for the extension
  return exports.types[extension] || false
}

/**
 * Populate the extensions and types maps.
 * This function initializes the extensions and types maps using data from mime-db.
 * @private
 */

function populateMaps (extensions, types) {
  // Preference order for sources (least preferred -> most preferred)
  var preference = ['
