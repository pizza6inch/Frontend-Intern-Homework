"use strict";

// Import the 'safer-buffer' module to safely handle Buffer operations.
var Buffer = require("safer-buffer").Buffer;

// Single-byte codec object constructor. Requires a 'chars' string parameter that contains
// 256 or 128 characters that correspond to encoded bytes (if 128 - then lower half is ASCII).

exports._sbcs = SBCSCodec;
function SBCSCodec(codecOptions, iconv) {
    if (!codecOptions)
        // Throw an error if the codec is called without the required data.
        throw new Error("SBCS codec is called without the data.");

    // Prepare char buffer for decoding.
    if (!codecOptions.chars || (codecOptions.chars.length !== 128 && codecOptions.chars.length !== 256))
        // Throw an error if the length of the 'chars' parameter is not 128 or 256.
        throw new Error("Encoding '" + codecOptions.type + "' has incorrect 'chars' (must be of len 128 or 256)");

    if (codecOptions.chars.length === 128) {
        // Add ASCII characters to the 'chars' parameter if its length is 128.
        var asciiString = "";
        for (var i = 0; i < 128; i++)
            asciiString += String.fromCharCode(i);
        codecOptions.chars = asciiString + codecOptions.chars;
    }

    // Create a Buffer object for decoding.
    this.decodeBuf = Buffer.from(codecOptions.chars, 'ucs2');

    // Create a Buffer object for encoding.
    var encodeBuf = Buffer.alloc(65536, iconv.defaultCharSingleByte.charCodeAt(0));

    // Fill the encoding buffer with characters and their corresponding code points.
    for (var i = 0; i < codecOptions.chars.length; i++)
        encodeBuf[codecOptions.chars.charCodeAt(i)] = i;

    this.encodeBuf = encodeBuf;
}

// Encoder prototype for the SBCSCodec object.
SBCSCodec.prototype.encoder = SBCSEncoder;

// Decoder prototype for the SBCSCodec object.
SBCSCodec.prototype.decoder = SBCSDecoder;


function SBCSEncoder(options, codec) {
    // Set the encoding buffer for the encoder.
    this.encodeBuf = codec.encodeBuf;
}

// Write method for the encoder that converts a string to a Buffer object.
SBCSEncoder.prototype.write = function(str) {
    var buf = Buffer.alloc(str.length);

    // Iterate through each character in the input string and convert it to its corresponding
    // code point in the encoding buffer.
    for (var i = 0; i < str.length; i++)
        buf[i] = this.encodeBuf[str.charCodeAt(i)];

    return buf;
}

// End method for the encoder.
SBCSEncoder.prototype.end = function() {
}


function SBCSDecoder(options, codec) {
    // Set the decoding buffer for the decoder.
    this.decodeBuf = codec.decodeBuf;
}

// Write method for the decoder that converts a Buffer object to a string.
SBCSDecoder.prototype.write = function(buf) {
    // Create a new Buffer object for decoding and initialize it with twice
