import { requiresBasicAuth } from "@octokit/auth-oauth-user";
import { RequestError } from "@octokit/request-error";
import { getAppAuthentication } from "./get-app-authentication.js";
import { getInstallationAuthentication } from "./get-installation-authentication.js";
import { requiresAppAuth } from "./requires-app-auth.js";

// Constants
const FIVE_SECONDS_IN_MS = 5 * 1e3; // 5 seconds in milliseconds

// Helper function to check if the error is not a time skew error
function isNotTimeSkewError(error) {
  // Check if the error message does not match the time skew error messages
  return !(
    error.message.match(
      /'Expiration time' claim \('exp'\) must be a numeric value representing the future time at which the assertion expires/
    ) ||
    error.message.match(
      /'Issued at' claim \('iat'\) must be an Integer representing the time that the assertion was issued/
    )
  );
}

// Main hook function to handle authentication and requests
async function hook(state, request, route, parameters) {
  const endpoint = request.endpoint.merge(route, parameters); // Merge the route and parameters with the request endpoint
  const url = endpoint.url; // Get the URL of the endpoint

  // Check if the URL matches the OAuth access token endpoint and return the request if it does
  if (/\/login\/oauth\/access_token$/.test(url)) {
    return request(endpoint);
  }

  // Check if the URL requires app authentication and add the app authentication token if it does
  if (requiresAppAuth(url.replace(request.endpoint.DEFAULTS.baseUrl, ""))) {
    const { token: token2 } = await getAppAuthentication(state);
    endpoint.headers.authorization = `bearer ${token2}`;

    let response;
    try {
      response = await request(endpoint);
    } catch (error) {
      // If the error is not a time skew error, throw the error
      if (isNotTimeSkewError(error)) {
        throw error;
      }

      // If the response headers do not have a date property, throw the error
      if (typeof error.response.headers.date === "undefined") {
        throw error;
      }

      // Calculate the difference between the GitHub API time and system time
      const diff = Math.floor(
        (Date.parse(error.response.headers.date) - Date.parse((/* @__PURE__ */ new Date()).toString())) / 1e3
      );

      // Log the error message and the time difference warning
      state.log.warn(error.message);
      state.log.warn(
        `[@octokit/auth-app] GitHub API time and system time are different by ${diff} seconds. Retrying request with the difference accounted for.`
      );

      // Get a new app authentication token with the time difference and add it to the headers
      const { token: token3 } = await getAppAuthentication({
        ...state,
        timeDifference: diff
      });
      endpoint.headers.authorization = `bearer ${token3}`;

      // Retry the request with the new token
      return request(endpoint);
    }

    // Return the response
    return response;
  }

  // Check if the URL requires basic authentication and add the authentication if it does
  if (requiresBasicAuth(url)) {
    const authentication = await state.oauthApp({ type: "oauth-app" });
    endpoint.headers.authorization = authentication.headers.authorization;
    return request(endpoint);
  }

  // Get the installation authentication token and add it to the headers
  const { token, createdAt } = await getInstallationAuthentication(
    state,
    // @ts-expect-error TBD
    {},
    request
  );
  endpoint.headers.authorization = `token ${token}`;

  // Retry the request with the installation authentication token if the token replication delay is too long
  return sendRequestWithRetries(
    state,
    request,
    endpoint,
    createdAt
  );
}

// Helper function to retry requests with the installation authentication token
async function sendRequestWithRetries(state, request, options, createdAt, retries = 0) {
  // Calculate the time since the token was created in milliseconds
  const timeSinceTokenCreationInMs = +/* @__PURE__ */ new Date() - +new Date(createdAt);

  try {
    // Send the request and return the response
    return await request(options);
  } catch (error) {
    // If the error status is not 401, throw the error
    if (error.status !== 401) {
      throw error;
    }

    // If the time since the token was created is greater than 5 seconds, throw the error
    if (timeSinceTokenCreationInMs >= FIVE_SECONDS_IN_MS) {
      if (retries > 0) {
        // Build the error message with the number of retries and time since token creation
        error.message = `After ${retries} retries within ${timeSinceTokenCreationInMs / 1e3}s of creating the installation access token, the response remains 401. At this point, the cause may be an authentication problem or a system outage. Please check https://www.githubstatus.com for status information`;
      }
      throw error;
    }

    // Increment the number of retries and calculate the time to wait before retrying
    ++retries;
    const awaitTime = retries * 1e3;

    // Log the warning message with the number of retries and time to wait
    state.log.warn(
      `[@octokit/auth-app] Retrying after 401 response to account for token replication delay
