// Import required modules
const parser = require("./parser");
const Events = require("./Events");
const RedisConnection = require("./RedisConnection");
const IORedisConnection = require("./IORedisConnection");
const Scripts = require("./Scripts");
const { Bottleneck } = require("./Bottleneck");

// Define the Group class with default values
class Group {
  constructor(limiterOptions = {}) {
    // Load limiter options and merge with defaults
    parser.load(limiterOptions, this.defaults, this);

    // Initialize Events object
    this.Events = new Events(this);
    this.instances = {};

    // Import Bottleneck module
    this.Bottleneck = Bottleneck;

    // Start auto cleanup
    this._startAutoCleanup();

    // Shared connection or new connection based on limiterOptions
    this.sharedConnection = this.connection;
    this.connection =
      this.connection ||
      (() => {
        if (limiterOptions.datastore === "redis") {
          return new RedisConnection(Object.assign({}, limiterOptions, { Events: this.Events }));
        } else if (limiterOptions.datastore === "ioredis") {
          return new IORedisConnection(Object.assign({}, limiterOptions, { Events: this.Events }));
        }
      })();
  }

  // Get or create a limiter instance
  key(key = "") {
    const limiter = this.instances[key] || do => {
      this.instances[key] = new this.Bottleneck(Object.assign(this.limiterOptions, {
        id: `${this.id}-${key}`,
        timeout: this.timeout,
        connection: this.connection
      }));
      this.Events.trigger("created", this.instances[key], key);
      return this.instances[key];
    };

    return limiter();
  }

  // Delete a limiter instance
  deleteKey(key = "") {
    const instance = this.instances[key];
    if (this.connection) {
      const deleted = await this.connection.__runCommand__(["del", Scripts.allKeys(`${this.id}-${key}`)]);
    }
    if (instance) {
      delete this.instances[key];
      instance.disconnect();
    }
    return Boolean(instance || deleted > 0);
  }

  // Get all limiter instances
  limiters() {
    return Object.entries(this.instances).reduce((result, [key, limiter]) => {
      result[key] = limiter;
      return result;
    }, {});
  }

  // Get all keys of limiter instances
  keys() {
    return Object.keys(this.instances);
  }

  // Get keys of limiter instances in a cluster
  clusterKeys() {
    if (!this.connection) return this.Promise.resolve(this.keys());

    const keys = [];
    let cursor = null;
    const start = `b_${this.id}-`.length;
    const end = `_settings`.length;

    do {
      const [next, found] = await this.connection.__runCommand__(
        ["scan", (cursor ? 0 : null), "match", `b_${this.id}-*_settings`, "count", 10000]
      );
      cursor = next === 0 ? null : parseInt(next, 10);
      keys.push(key.slice(start, -end));
    } while (cursor);

    return keys;
  }

  // Auto cleanup function
  _startAutoCleanup() {
    clearInterval(this.interval);
    this.interval = setInterval(async () => {
      const time = Date.now();
      for (const [k, v] of Object.entries(this.instances)) {
        try {
          if (await v._store.__groupCheck__(time
