// Import required modules: path and fs (file system)
var path = require('path');
var fs = require('fs');

// Define the Mime function to manage mime types
function Mime() {
  // Initialize maps for storing mime types and their corresponding extensions
  this.types = Object.create(null);
  this.extensions = Object.create(null);
}

// Define the prototype method for adding mime types
Mime.prototype.define = function (map) {
  for (var type in map) { // Iterate over each mime type
    var exts = map[type]; // Get the associated extensions
    for (var i = 0; i < exts.length; i++) { // Iterate over each extension
      if (process.env.DEBUG_MIME && this.types[exts[i]]) { // Check for duplicate extensions
        console.warn((this._loading || "define()").replace(/.*\//, ''), 'changes "' + exts[i] + '" extension type from ' +
          this.types[exts[i]] + ' to ' + type);
      }

      this.types[exts[i]] = type; // Add the extension-mime type pair
    }

    // Set the default extension for the mime type
    if (!this.extensions[type]) {
      this.extensions[type] = exts[0];
    }
  }
};

// Define the prototype method for loading mime types from a file
Mime.prototype.load = function(file) {
  this._loading = file; // Set the loading file
  // Read the file and split it into lines
  var map = {},
      content = fs.readFileSync(file, 'ascii'),
      lines = content.split(/[\r\n]+/);

  lines.forEach(function(line) { // Iterate over each line
    // Clean up whitespace/comments, and split into fields
    var fields = line.replace(/\s*#.*|^\s*|\s*$/g, '').split(/\s+/);
    map[fields.shift()] = fields; // Add the mime type-extension pair
  });

  this.define(map); // Define the mime types

  this._loading = null; // Reset the loading file
};

// Define the prototype method for looking up a mime type based on extension
Mime.prototype.lookup = function(path, fallback) {
  var ext = path.replace(/^.*[\.\/\\]/, '').toLowerCase(); // Get the file extension

  return this.types[ext] || fallback || this.default_type; // Return the mime type or fallback
};

// Define the prototype method for getting the file extension associated with a mime type
Mime.prototype.extension = function(mimeType) {
  var type = mimeType.match(/^\s*([^;\s]*)(?:;|\s|$)/)[1].toLowerCase(); // Get the mime type
  return this.extensions[type]; // Return the associated extension
};

// Create a default Mime instance
var mime = new Mime();

// Load built-in mime types
mime.define(require('./types.json'));

// Set the default mime type
mime.default_type = mime.lookup('bin');

// Extend the default instance with additional methods
mime.Mime = Mime;

// Define the charsets object with a lookup method
mime.charsets = {
  lookup: function(mimeType, fallback) {
    // Assume text types are utf8
    return (/^text\/|^application\/(javascript|json)/).test(mimeType) ? 'UTF-8' : fallback;
  }
};

module.exports = mime; // Export the default Mime instance
