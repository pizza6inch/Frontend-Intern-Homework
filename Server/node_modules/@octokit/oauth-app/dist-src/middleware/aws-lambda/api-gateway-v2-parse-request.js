// This function, parseRequest, takes in a request object as a parameter
function parseRequest(request) {
  // Destructure the request.requestContext.http object to get the method property
  const { method } = request.requestContext.http;
  // Initialize the url variable to the rawPath property of the request object
  let url = request.rawPath;
  // Destructure the request.requestContext object to get the stage property
  const { stage } = request.requestContext;
  // Check if the url starts with "/" and the stage, if so, remove the stage and the "/"
  if (url.startsWith("/" + stage))
    url = url.substring(stage.length + 1);
  // Check if the request object has a rawQueryString property, if so, append it to the url with a "?"
  if (request.rawQueryString)
    url += "?" + request.rawQueryString;
  // Destructure the request.headers object to get the headers property
  const headers = request.headers;
  // Initialize the text variable to an async function that returns the request.body property or an empty string
  const text = async () => request.body || "";
  // Return an object containing the method, url, headers, and text properties
  return { method, url, headers, text };
}

// Export the parseRequest function as a named export
export {
  parseRequest
};
