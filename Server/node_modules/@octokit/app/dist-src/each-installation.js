import { composePaginateRest } from "@octokit/plugin-paginate-rest";
import { Octokit } from "@octokit/core";
import { App } from "./index";
import { getInstallationOctokit } from "./get-installation-octokit";

// eachInstallationFactory function returns an object with two methods:
// - eachInstallation: an async function that iterates over each installation
//   and invokes the provided callback function for each installation.
// - iterator: an async iterator that yields the installation objects.
function eachInstallationFactory(app) {
  return Object.assign(eachInstallation.bind(null, app), {
    iterator: eachInstallationIterator.bind(null, app)
  });
}

// eachInstallation is an async function that takes a callback function as
// an argument and invokes it for each installation object.
async function eachInstallation(app, callback) {
  const i = eachInstallationIterator(app)[Symbol.asyncIterator]();
  let result = await i.next();
  while (!result.done) {
    await callback(result.value); // Invoke the callback function with the installation object.
    result = await i.next();
  }
}

// eachInstallationIterator is an async iterator that yields installation objects.
function eachInstallationIterator(app) {
  return {
    async *[Symbol.asyncIterator]() { // Define the async iterator using the Symbol.asyncIterator method.
      const iterator = composePaginateRest.iterator( // Create a paginated iterator using the composePaginateRest plugin.
        app.octokit,
        "GET /app/installations"
      );
      for await (const { data: installations } of iterator) { // Iterate over each page of installations.
        for (const installation of installations) { // Iterate over each installation in the current page.
          const installationOctokit = await getInstallationOctokit( // Get an Octokit instance for the current installation.
            app,
            installation.id
          );
          yield { octokit: installationOctokit, installation }; // Yield
