// Import necessary functions and types from local modules
import { createEventHandler } from "./event-handler/index.js";
import type {
  // Import EmitterWebhookEvent type
  EmitterWebhookEvent,
  // Import EmitterWebhookEventName type
  EmitterWebhookEventName,
  // Import HandlerFunction type
  HandlerFunction,
  // Import RemoveHandlerFunction type
  RemoveHandlerFunction,
  // Import Options type
  Options,
  // Import WebhookError type
  WebhookError,
  // Import WebhookEventHandlerError type
  WebhookEventHandlerError,
  // Import EmitterWebhookEventWithStringPayloadAndSignature type
  EmitterWebhookEventWithStringPayloadAndSignature
} from "./types.js";

// Import createNodeMiddleware function from middleware/node/index.js
export { createNodeMiddleware } from "./middleware/node/index.js";

// Import emitterEventNames from generated/webhook-names.js
export { emitterEventNames } from "./generated/webhook-names.js";

// Define Webhooks class with type TTransformed (default is unknown)
declare class Webhooks<TTransformed = unknown> {
  // sign method to sign a payload
  sign: (payload: string) => Promise<string>;

  // verify method to verify a payload and signature
  verify: (eventPayload: string, signature: string) => Promise<boolean>;

  // on method to attach an event handler for a specific event or multiple events
  on: <E extends EmitterWebhookEventName>(
    event: E | E[], // Event or array of events
    callback: HandlerFunction<E, TTransformed> // Callback function
  ) => void;

  // onAny method to attach an event handler for any event
  onAny: (callback: (event: TTransformed extends unknown ? EmitterWebhookEvent : EmitterWebhookEvent & TTransformed) => any) => void;

  // onError method to attach an error handler
  onError: (callback: (event: WebhookEventHandlerError<TTransformed>) => any) => void;

  // removeListener method to remove an event listener
  removeListener: <E extends EmitterWebhookEventName | "*">(
    event: E | E[], // Event or array of events
    callback: RemoveHandlerFunction<E, TTransformed>
