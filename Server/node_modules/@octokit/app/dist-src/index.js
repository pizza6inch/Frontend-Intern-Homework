// Import necessary modules and classes
import { Octokit as OctokitCore } from "@octokit/core";
import { createAppAuth } from "@octokit/auth-app";
import { OAuthApp } from "@octokit/oauth-app";
import { Webhooks } from "@octokit/webhooks";
import { VERSION } from "./version";
import { webhooks } from "./webhooks";
import { eachInstallationFactory } from "./each-installation";
import { eachRepositoryFactory } from "./each-repository";
import { getInstallationOctokit } from "./get-installation-octokit";

// Define the App class
class App {
  // Static version variable
  static VERSION = VERSION;

  // Static method to create a new class with default values
  static defaults(defaults) {
    const AppWithDefaults = class extends this {
      constructor(...args) {
        super({
          ...defaults,
          ...args[0]
        });
      }
    };
    return AppWithDefaults;
  }

  // Constructor for the App class
  constructor(options) {
    const Octokit = options.Octokit || OctokitCore;

    // Set up the authOptions object based on the input options
    const authOptions = Object.assign(
      {
        appId: options.appId,
        privateKey: options.privateKey
      },
      options.oauth ? {
        clientId: options.oauth.clientId,
        clientSecret: options.oauth.clientSecret
      } : {}
    );

    // Initialize the octokit instance with the authOptions and other settings
    this.octokit = new Octokit({
      authStrategy: createAppAuth,
      auth: authOptions,
      log: options.log
    });

    // Set up the log object with default and user-provided logging methods
    this.log = Object.assign(
      {
        debug: () => {
        },
        info: () => {
        },
        warn: console.warn.bind(console),
        error: console.error.bind(console)
      },
      options.log
    );

    // Initialize webhooks if provided in the options
    if (options.webhooks) {
      this.webhooks = webhooks(this.octokit, options.webhooks);
    } else {
      // Throw an error if webhooks are not provided in the options
      Object.defineProperty(this, "webhooks", {
        get() {
          throw new Error("[@octokit/app] webhooks option not set");
        }
      });
    }

    // Initialize oauth if provided in the options
    if (options.oauth) {
      this.oauth = new OAuthApp({
        ...options.oauth,
        clientType: "github-app",
        Octokit
      });
    } else {
      // Throw an error if oauth.clientId / oauth.clientSecret options are not set
      Object.defineProperty(this, "oauth", {
        get() {
          throw new Error(
            "[@octokit/app] oauth.clientId / oauth.clientSecret options are not set"
          );
        }
      });
    }

    // Initialize getInstallationOctokit method
    this.getInstallationOctokit = getInstallationOctokit.bind(
      null,
      this
    );

    // Initialize eachInstallation method
    this.eachInstallation = eachInstallationFactory(
      this
    );

    // Initialize eachRepository method
    this.eachRepository = eachRepositoryFactory(
      this
    );
  }
}

// Import and re-export createNodeMiddleware from "./middleware/node/index"
import { createNodeMiddleware } from "./middleware/node/index";
export {
  App,
  createNodeMiddleware
};
