// This function converts a given string into an ArrayBuffer.
// It creates a new ArrayBuffer with the same length as the input string,
// then initializes a Uint8Array view on the buffer and populates it
// with the character codes of the input string.
export function string2ArrayBuffer(str) {
    const buf = new ArrayBuffer(str.length);
    const bufView = new Uint8Array(buf);
    for (let i = 0, strLen = str.length; i < strLen; i++) {
        bufView[i] = str.charCodeAt(i);
    }
    return buf;
}

// This function extracts the DER-encoded content from a PEM-encoded string.
// It first removes the header and footer lines from the PEM string,
// then decodes the remaining base64-encoded string to a binary format.
// Finally, it converts the binary format to an ArrayBuffer using the
// string2ArrayBuffer function.
export function getDERfromPEM(pem) {
    const pemB64 = pem
        .trim()
        .split("\n")
        .slice(1, -1) // Remove the --- BEGIN / END PRIVATE KEY ---
        .join("");
    const decoded = atob(pemB64);
    return string2ArrayBuffer(decoded);
}

// This function creates a JWS-encoded message by concatenating the
// base64url-encoded JSON-serialized header and payload with a '.' separator.
export function getEncodedMessage(header, payload) {
    return `${base64encodeJSON(header)}.${base64encodeJSON(payload)}`;
}

// This function converts a given ArrayBuffer to a base64url-encoded string.
// It first converts the ArrayBuffer to a binary string, then encodes the
// binary string to base64 format. Finally, it replaces '+' and '/' characters
// with '-' and '_', respectively, and removes any trailing '=' characters.
export function base64encode(buffer) {
    var binary = "";
