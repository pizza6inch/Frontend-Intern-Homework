// isPlainObject function checks if the given value is a plain object or not
function isPlainObject(value) {
  // Check if the value is of type 'object' and not null
  if (typeof value !== "object" || value === null)
    return false;

  // Check if the value is an object with the correct toString tag
  if (Object.prototype.toString.call(value) !== "[object Object]")
    return false;

  // Get the object's prototype
  const proto = Object.getPrototypeOf(value);

  // If the prototype is null, it means the object is not inherited from any prototype
  if (proto === null)
    return true;

  // Check if the object's constructor is a function and is an instance of itself
  const Ctor = Object.prototype.hasOwnProperty.call(proto, "constructor") && proto.constructor;
  return typeof Ctor === "function" && Ctor instanceof Ctor && Function.prototype.call(Ctor) === Function.prototype.call(value);
}

// Export the isPlainObject function for use in other modules
export {
  isPlainObject
};
