'use strict';

// Import the 'inspect' function from the parent directory (../)
const inspect = require('../');

// Import the 'test' function from the 'tape' module
const test = require('tape');

// Import the 'hasToStringTag' function from the 'has-tostringtag/shams' module
const hasToStringTag = require('has-tostringtag/shams')();

// Start the 'bigint' test suite, with a 'skip' option if 'BigInt' is not defined
test('bigint', { skip: typeof BigInt === 'undefined' }, function (t) {
  // Start the 'primitives' test case, with a plan for 3 assertions
  t.test('primitives', function (st) {
    st.plan(3);

    // Assert that the 'inspect' function correctly formats BigInt primitives
    st.equal(inspect(BigInt(-256)), '-256n');
    st.equal(inspect(BigInt(0)), '0n');
    st.equal(inspect(BigInt(256)), '256n');
  });

  // Start the 'objects' test case, with a plan for 3 assertions
  t.test('objects', function (st) {
    st.plan(3);

    // Assert that the 'inspect' function correctly formats BigInt objects
    st.equal(inspect(Object(BigInt(-256))), 'Object(-256n)');
    st.equal(inspect(Object(BigInt(0))), 'Object(0n)');
    st.equal(inspect(Object(BigInt(256))), 'Object(256n)');
  });

  // Start the 'syntactic primitives' test case, with a plan for 3 assertions
  t.test('syntactic primitives', function (st) {
    st.plan(3);

    // Use the 'Function' constructor to create functions that return BigInt primitives
    // Disable the 'no-new-func' rule for this block
    /* eslint-disable no-new-func */
    st.equal(inspect(Function('return -256n')()), '-256n');
    st.equal(inspect(Function('return 0n')()), '0n');
    st.equal(inspect(Function('return 256n')()), '256n');
  });

  // Start the 'toStringTag' test case, with a plan for 1 assertion
  t.test('toStringTag', { skip: !hasToStringTag }, function (st) {
    st.plan(1);

    // Create a 'faker' object with a 'Symbol.toStringTag' property set to 'BigInt'
    const faker = {};
    faker[Symbol.toStringTag] = 'BigInt';

    // Assert that the 'inspect' function correctly formats the 'faker' object
    st.equal(
      inspect(faker),
      '{ [Symbol(Symbol.toStringTag)]: \'BigInt\' }',
      'object lying about being a BigInt inspects as an object'
    );
  });

  // Start the 'numericSeparator' test case
  t.test('numericSeparator', function (st) {
    // Assert that the 'inspect' function correctly formats BigInts with and without the 'numericSeparator' option
    st.equal(
