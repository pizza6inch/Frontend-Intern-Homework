import { Deprecation } from "deprecation";

// once is a function that returns a function, which will only be executed once
import once from "once";

// logOnceCode is a function that logs a deprecation warning only once
const logOnceCode = once((deprecation) => console.warn(deprecation));

// logOnceHeaders is a function that logs a deprecation warning only once
const logOnceHeaders = once((deprecation) => console.warn(deprecation));

// RequestError is a class that extends the built-in Error class
class RequestError extends Error {
  // constructor is a special method for creating and initializing an object created with a class
  constructor(message, statusCode, options) {
    super(message); // call the constructor of the super class (Error)
    if (Error.captureStackTrace) {
      Error.captureStackTrace(this, this.constructor); // capture a stack trace that will be attached to the error object
    }
    this.name = "HttpError"; // set the name property of the error object
    this.status = statusCode; // set the status property of the error object

    // headers is a property that will hold the headers of the response
    let headers;

    // options is an object that contains additional options for the error object
    if ("headers" in options && typeof options.headers !== "undefined") {
      headers = options.headers; // if headers are provided in the options object, assign them to the headers property
    }

    // response is an object that contains the response from the server
    if ("response" in options) {
      this.response = options.response; // assign the response object to the response property
      headers = options.response.headers; // assign the headers from the response object to the headers property
    }

    // requestCopy is a copy of the request object with sensitive information redacted
    const requestCopy = Object.assign({}, options.request);

    // if the request object has an authorization header, redact the value
    if (options.request.headers.authorization) {
      requestCopy.headers = Object.assign({}, options.request.headers, {
        authorization: options.request.headers.authorization.replace(
          / .*$/,
          " [REDACTED]"
        )
      });
    }

    // replace client_secret and access_token with [REDACTED] in the url
    requestCopy.url = requestCopy.url.replace(/\bclient_secret=\w+/g, "client_secret=[REDACTED]").replace(/\baccess_token=\w+/g, "access_token=[REDACTED]");

    // request is a property that holds a copy of the request object with sensitive information redacted
    this.request = requestCopy;

    // code is a property that returns the status code of the error
    Object.defineProperty(this, "code", {
      get() {
        // log a deprecation warning only once
        logOnceCode(
          new
