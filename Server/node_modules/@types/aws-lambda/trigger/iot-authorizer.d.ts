import { Handler } from "../handler";
// Handler is a type that represents a function with the following signature:
// (event: any, context: any, callback: (err: any, result: any) => void) => void

import { PolicyDocument } from "./api-gateway-authorizer";
// PolicyDocument is an interface that is likely defined in "./api-gateway-authorizer"
// and represents a document that contains IAM policy statements.

export type IoTProtocolType = "http" | "mqtt" | "tls";
// IoTProtocolType is a type alias for a string literal type that can be "http", "mqtt", or "tls".

export type IoTCustomAuthorizerHandler = Handler<IoTCustomAuthorizerEvent, IoTCustomAuthorizerResult>;
// IoTCustomAuthorizerHandler is a type that represents a function with the same signature as Handler,
// but with specific event and result types: IoTCustomAuthorizerEvent and IoTCustomAuthorizerResult.

export interface IoTProtocolDataTLS {
    serverName: string; // The server name indication (SNI) host_name string.
}

export interface IoTProtocolDataHTTP {
    headers: Record<string, string>;
    queryString: string;
}

export interface IoTProtocolDataMQTT {
    username?: string;
    password?: string; // A base64-encoded string.
    clientId: string; // Included in the event only when the device sends the value.
}

export interface IoTCustomAuthorizerEvent {
    token?: string;
    signatureVerified: boolean; // Indicates whether the device gateway has validated the signature.
    protocols: IoTProtocolType[]; // Indicates which protocols to expect for the request.
    protocolData: {
        tls?: IoTProtocolDataTLS;
        http?: IoTProtocolDataHTTP;
        mqtt?: IoTProtocolDataMQTT;
    };
    connectionMetadata: {
        id: string; // The connection ID. You can use this for logging.
    };
}

/**
 * IoT CustomAuthorizer AuthResponse.PolicyDocument.
 * The PolicyDocument interface is used to represent a document that contains IAM policy statements.
 * It is used in the IoT Custom Authorizer to define the permissions that a connected device has.
 *
 * For more information, see:
 * - https://docs.aws.amazon.com/iot/latest/developerguide/config-custom-auth.html#custom-auth-lambda
 * - https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_elements.html#Condition
 */
export interface IoTCustomAuthorizerResult {
    isAuthenticated: boolean; // A Boolean that determines whether client can connect.
    principalId: string; // A string that identifies the connection in logs.
    disconnectAfterInSeconds: number;
    refreshAfterInSeconds: number;
    policyDocuments:
