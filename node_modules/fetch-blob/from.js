import { statSync, createReadStream, promises as fs } from 'node:fs'
import { basename } from 'node:path'
import DOMException from 'node-domexception'

import File from './file.js'
import Blob from './index.js'

const { stat } = fs

/**
 * Creates a Blob object from a file on the disk.
 *
 * @param {string} path - The filepath on the disk.
 * @param {string} [type] - The mimetype to use for the Blob.
 * @returns {Blob} A new Blob object.
 */
const blobFromSync = (path, type) => fromBlob(statSync(path), path, type)

/**
 * Creates a Blob object from a file on the disk asynchronously.
 *
 * @param {string} path - The filepath on the disk.
 * @param {string} [type] - The mimetype to use for the Blob.
 * @returns {Promise<Blob>} A promise that resolves to a new Blob object.
 */
const blobFrom = (path, type) => stat(path).then(stat => fromBlob(stat, path, type))

/**
 * Creates a File object from a file on the disk.
 *
 * @param {string} path - The filepath on the disk.
 * @param {string} [type] - The mimetype to use for the File.
 * @returns {Promise<File>} A promise that resolves to a new File object.
 */
const fileFrom = (path, type) => stat(path).then(stat => fromFile(stat, path, type))

/**
 * Creates a File object from a file on the disk synchronously.
 *
 * @param {string} path - The filepath on the disk.
 * @param {string} [type] - The mimetype to use for the File.
 * @returns {File} A new File object.
 */
const fileFromSync = (path, type) => fromFile(statSync(path), path, type)

/**
 * Creates a Blob object from a file on the disk using a BlobDataItem.
 *
 * @private
 * @param {object} stat - The file stats.
 * @param {string} path - The filepath on the disk.
 * @param {string} type - The mimetype to use for the Blob.
 * @returns {Blob} A new Blob object.
 */
// @ts-ignore
const fromBlob = (stat, path, type = '') => new Blob([new BlobDataItem({
  path,
  size: stat.size,
  lastModified: stat.mtimeMs,
  start: 0
})], { type })

/**
 * Creates a File object from a file on the disk using a BlobDataItem.
 *
 * @private
 * @param {object} stat - The file stats.
 * @param {string} path - The filepath on the disk.
 * @param {string} type - The mimetype to use for the File.
 * @returns {File} A new File object.
 */
// @ts-ignore
const fromFile = (stat, path, type = '') => new File([new BlobDataItem({
  path,
  size: stat.size,
  lastModified: stat.mtimeMs,
  start: 0
})], basename(path), { type, lastModified: stat.mtimeMs })

/**
 * This is a blob backed up by a file on the disk
 * with minium requirement. Its wrapped around a Blob as a blobPart
 * so you have no direct access to this.
 *
 * @private
 */
class BlobDataItem {
  #path
  #start

  /**
   * Creates a new BlobDataItem.
   *
   * @param {object} options - The options for creating the BlobDataItem.
   * @param {string} options.path - The filepath on the disk.
   * @param {number} options.size - The size of the file.
   * @param {number} options.lastModified - The last modified time of the file.
   * @param {number} options.start - The start position of the slice.
   */
  constructor (options) {
    this.#path = options.path
    this.#start = options.start
    this.size = options.size
    this.lastModified = options.lastModified
  }


