// Import required modules: btoa-lite for encoding and requiresBasicAuth for authentication validation
import btoa from "btoa-lite";
import { requiresBasicAuth } from "@octokit/auth-oauth-user";

// The main async function hook that takes state, request, route, and parameters as arguments
async function hook(state, request, route, parameters) {
  // Merge the route and parameters with the request endpoint
  let endpoint = request.endpoint.merge(
    route,
    parameters
  );

  // Regular expression test to check if the endpoint URL is for login/oauth/access_token or login/device/code
  if (/\/login\/(oauth\/access_token|device\/code)$/.test(endpoint.url)) {
    // If the test passes, simply return the request with the modified endpoint
    return request(endpoint);
  }

  // Check if the clientType is 'github-app' and if the endpoint URL does not require basic auth
  if (state.clientType === "github-app" && !requiresBasicAuth(endpoint.url)) {
    // If both conditions are true, throw an error with a detailed message
    throw new Error(
      `[@octokit/auth-oauth-app] GitHub Apps cannot use their client ID/secret for basic authentication for endpoints other than "/applications/{client_id}/**". "${endpoint.method} ${endpoint.url}" is not supported.`
    );
  }

  // Encode the clientId and clientSecret using btoa
  const credentials = btoa(`${state.clientId}:${state.clientSecret}`);

  // Add the encoded credentials to the endpoint headers with 'basic' authorization
  endpoint.headers.authorization = `basic ${credentials}`;

  // Try to make the request with the modified endpoint
  try {
    return await request(endpoint);
  } catch (error) {
    // If the status code is 401, throw an error with a detailed message
    if (error.status !== 401)
      throw error;
    error.message = `[@octok
