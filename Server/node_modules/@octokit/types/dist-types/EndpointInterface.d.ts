import type { EndpointDefaults } from "./EndpointDefaults";
import type { RequestOptions } from "./RequestOptions";
import type { RequestParameters } from "./RequestParameters";
import type { Route } from "./Route";
import type { Endpoints } from "./generated/Endpoints";

export interface EndpointInterface<D extends object = object> {
    /**
     * Transforms a GitHub REST API endpoint into generic request options.
     * This method accepts an `options` object that must set the `method` and `url` properties.
     * Additional URL, query or body parameters, as well as `headers`, `mediaType.{format|previews}`, `request`, or `baseUrl` can also be included.
     *
     * @template O The type of the `options` object, which extends `RequestParameters`.
     * @param {O & { method?: string; } & ("url" extends keyof D ? { url?: string; } : { url: string; })} options The options object that contains the endpoint configuration.
     * @return {RequestOptions & Pick<D & O, keyof RequestOptions>} The generated request options.
     *
     */
    <O extends RequestParameters = RequestParameters>(options: O & {
        method?: string;
    } & ("url" extends keyof D ? {
        url?: string;
    } : {
        url: string;
    })): RequestOptions & Pick<D & O, keyof RequestOptions>;

    /**
     * Transforms a GitHub REST API endpoint into generic request options.
     * This method accepts a `route` string that represents the request method and URL,
     * and an optional `parameters` object that contains additional URL, query or body parameters, as well as `headers`, `mediaType.{format|previews}`, `request`, or `baseUrl`.
     *
     * @template R The type of the `route` string, which extends `Route`.
     * @template P The type of the `parameters` object, which extends `RequestParameters`.
     * @param {keyof Endpoints | R} route The request method and URL.
     * @param {P} [parameters] Optional parameters object.
     * @return {(R extends keyof Endpoints ? Endpoints[R]["request"] : RequestOptions) & Pick<P, keyof RequestOptions>} The generated request options.
     *
     */
    <R extends Route, P extends RequestParameters = R extends keyof Endpoints ? Endpoints[R]["parameters"] & RequestParameters : RequestParameters>(route: keyof Endpoints | R, parameters?: P): (R extends keyof Endpoints ? Endpoints[R]["request"] : RequestOptions) & Pick<P, keyof RequestOptions>;

    /**
     * Object with current default route and parameters.
     *
     * @type {D & EndpointDefaults}
     *
     */
    DEFAULTS: D & EndpointDefaults;

    /**
     * Returns a new `endpoint` interface with new defaults.
     *
     * @template O The type of the `newDefaults` object, which extends `RequestParameters`.
     * @param {O} newDefaults The new defaults to be merged with the current defaults.
     * @return {EndpointInterface<D & O>} The new endpoint interface with the merged defaults.
     *
     */
    defaults: <O extends RequestParameters = RequestParameters>(newDefaults: O) => EndpointInterface<D & O>;

    /**
     * Object that provides methods to merge current endpoint defaults with passed route and parameters.
     *
     * @property {<R extends Route, P extends RequestParameters = R extends keyof Endpoints ? Endpoints[R]["parameters"] & RequestParameters : RequestParameters>(route: keyof Endpoints | R, parameters?: P) => D & (R extends keyof Endpoints ? Endpoints[R]["request"] & Endpoints[R]["parameters"] : EndpointDefaults) & P} merge.<R, P> The method to merge the current endpoint defaults with passed route and parameters, without transforming them into request options.
     * @property {<P extends RequestParameters = RequestParameters>(options: P) => EndpointDefaults & D & P} merge. The method to merge the current endpoint defaults with passed options, without transforming them into request options.
     * @property {() => D & EndpointDefaults} merge. The method to return current default options.
     *
     */
    merge: {
        /**
         * Merges current endpoint defaults with passed route and parameters,
         * without transforming them into request options.
         *
         * @template R The type of the `route` string, which extends `Route`.
         * @template P The type of the `parameters` object, which extends `RequestParameters`.
         * @param {keyof Endpoints | R} route The request method and URL.
         * @param {P} [parameters] Optional parameters object.
         * @return {D & (R extends keyof Endpoints ? Endpoints[R]["request"] & Endpoints[R]["parameters"] : EndpointDefaults) & P} The merged defaults and parameters.
         *
         */
        <R extends Route, P extends RequestParameters = R extends keyof Endpoints ? Endpoints[R]["parameters"] & RequestParameters : RequestParameters>(route: keyof Endpoints | R, parameters?: P): D & (R extends keyof Endpoints ? Endpoints[R]["request"] & Endpoints[R]["parameters"] : EndpointDefaults) & P;

        /**
         * Merges current endpoint defaults with passed options,
         * without transforming them into request options.
         *
         * @template P The type of the `options` object, which extends `RequestParameters`.
         * @param {P} options The options object that contains the endpoint configuration.
         * @return {EndpointDefaults & D & P} The merged defaults and parameters.
         *
         */
        <P extends RequestParameters = RequestParameters>(options: P): EndpointDefaults & D & P;

        /**
         * Returns current default options.
         *
         * @deprecated use endpoint.DEFAULTS instead
         * @return {D & EndpointDefaults} The current default options.
