"use strict";

// Importing necessary modules and setting up the dist-src exports object
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// Importing required modules
var import_universal_user_agent = require("universal-user-agent");
var import_request = require("@octokit/request");

// dist-src exports
var dist_src_exports = {};
__export(dist_src_exports, {
  createOAuthAppAuth: () => createOAuthAppAuth,
  createOAuthUserAuth: () => import_auth_oauth_user3.createOAuthUserAuth
});
module.exports = __toCommonJS(dist_src_exports);

// Importing btoa-lite and auth-oauth-user for auth.js
var import_btoa_lite = __toESM(require("btoa-lite"));
var import_auth_oauth_user = require("@octokit/auth-oauth-user");

// auth.js
async function auth(state, authOptions) {
  // Authenticating the OAuth App
  if (authOptions.type === "oauth-app") {
    return {
      type: "oauth-app",
      clientId: state.clientId,
      clientSecret: state.clientSecret,
      clientType: state.clientType,
      headers: {
        authorization: `basic ${(0, import_btoa_lite.default)(
          `${state.clientId}:${state.clientSecret}`
        )}`
      }
    };
  }

  // Authenticating the user using the provided factory function
  if ("factory" in authOptions) {
    const { type, ...options } = {
      ...authOptions,
      ...state
    };
    return authOptions.factory(options);
  }

  // Creating the common object for user authentication
  const common = {
    clientId: state.clientId,
    clientSecret: state.clientSecret,
    request: state.request,
    ...authOptions
  };

  // Authenticating the user
  const userAuth = state.clientType === "oauth-app" ? await (0, import_auth_oauth_user.createOAuthUserAuth)({
    ...common,
    clientType: state.clientType
  }) : await (0, import_auth_oauth_user.createOAuthUserAuth)({
    ...common,
    clientType: state.clientType
  });

  // Returning the authenticated user
  return userAuth();
}

// Importing btoa-lite and auth-oauth-user for hook.js
var import_btoa_lite2 = __toESM(require("btoa-lite"));
var import_auth_oauth_user2 = require("@octokit/auth-oauth-user");

// hook.js
async function hook(state, request2, route, parameters) {
  // Merging the route and parameters with the endpoint
  let endpoint = request2.endpoint.merge(
    route,
    parameters
  );

  // Checking if the endpoint URL is for login or device code
  if (/\/login\/(oauth\/access_token|device\/code)$/.test(endpoint.url)) {
    return request2(endpoint);
  }

  // Checking if the client type is a GitHub App
  if (state.clientType === "github-app" && !(0, import_auth_oauth_user2.requiresBasicAuth)(endpoint.url)) {
    throw new Error(
      `[@octokit/auth-oauth-app] GitHub Apps cannot use their client ID/secret for basic authentication for endpoints other than "/applications/{client_id}/**". "${endpoint.method} ${endpoint.url}" is not supported.`
    );
  }

  // Creating the credentials for basic authentication
  const credentials = (0, import_btoa_lite2.default)(`${state.clientId}:${state.clientSecret}`);

  // Adding the credentials to the endpoint headers
  endpoint.headers.authorization = `basic ${credentials}`;

  try {
    // Returning the request result
    return await request2(endpoint);
  } catch (error) {
    if (error.status !== 401)
      throw error;
    error.message = `[@octokit/auth-oauth-app] "${endpoint.method}
