import { URL } from 'url'
import { TlsOptions } from 'tls'
import Dispatcher from './dispatcher'
import buildConnector from "./connector";

/**
 * A basic HTTP/1.1 client, mapped on top a single TCP/TLS connection. Pipelining is disabled by default.
 * This class extends Dispatcher and provides a constructor, properties, and methods for creating and managing an HTTP/1.1 client.
 */
export class Client extends Dispatcher {
  /**
   * Create a new Client instance with the given `url` and `options`.
   * @param url - The URL of the server to connect to. This can be a string or a URL object.
   * @param options - Additional options for configuring the client.
   */
  constructor(url: string | URL, options?: Client.Options);
  
  /**
   * Property to get and set the pipelining factor.
   * Pipelining is a technique for improving the performance of HTTP/1.1 by allowing multiple requests to be sent over a single connection without waiting for the responses.
   * The default value is 1, meaning that pipelining is disabled.
   */
  pipelining: number;
  
  /**
   * `true` after `client.close()` has been called.
   * Indicates whether the client has been closed.
   */
  closed: boolean;
  
  /**
   * `true` after `client.destroyed()` has been called or `client.close()` has been called and the client shutdown has completed.
   * Indicates whether the client has been destroyed.
   */
  destroyed: boolean;
}

/**
 * Namespace for Client class options.
 */
export declare namespace Client {
  /**
   * Interface for options interceptors.
   * Interceptors are functions that can modify the request and response objects before they are processed by the client.
   */
  export interface OptionsInterceptors {
    Client: readonly Dispatcher.DispatchInterceptor[];
  }
  
  /**
   * Interface for Client options.
   * Contains various options for configuring the client, such as `maxHeaderSize`, `headersTimeout`, `connectTimeout`, `bodyTimeout`, `keepAliveTimeout`, `keepAliveMaxTimeout`, `keepAliveTimeoutThreshold`, `socketPath`, `pipelining`, `strictContentLength`, `maxCachedSessions`, `maxRedirections`, `connect`, `maxRequestsPerClient`, `localAddress`, `maxResponseSize`, `autoSelectFamily`, `autoSelectFamilyAttemptTimeout`, `allowH2`, and `maxConcurrentStreams`.
   */
  export interface Options {
    // TODO: Add descriptions for each option
    interceptors?: OptionsInterceptors;
    maxHeaderSize?: number;
    headersTimeout?: number;
    connectTimeout?: number;
    bodyTimeout?: number;
    keepAliveTimeout?: number;
    keepAliveMaxTimeout?: number;
    keepAliveTimeoutThreshold?: number;
    socketPath?: string;
    pipelining?: number;
    strictContentLength?: boolean;
    maxCachedSessions?: number;
    maxRedirections?: number;
    connect?: buildConnector.BuildOptions | buildConnector.connector;
    maxRequestsPerClient?: number;
    localAddress?: string;
    maxResponseSize?: number;
    autoSelectFamily?: boolean;
    autoSelectFamilyAttemptTimeout?: number;
    allowH2?: boolean;
    maxConcurrentStreams?: number;
  }
  
  /**
   * Interface for socket information.
   * Contains information about the socket, such as `localAddress`, `localPort`, `remoteAddress`, `remotePort`, `remoteFamily`, `timeout`, `bytesWritten`, and `bytesRead`.
   */
  export interface SocketInfo {
    localAddress?: string
    localPort?: number
    remoteAddress?: string
    remotePort?: number
    remoteFamily?: string
    timeout?: number
    bytesWritten?: number
    bytesRead?: number
  }
}

/**
 * Export the Client class as the default export.
 */
export default Client;
