import { Handler } from "../handler";

// Define a type alias for a CloudWatch Logs handler, which is a function
// with the following signature: Handler<CloudWatchLogsEvent, void>
export type CloudWatchLogsHandler = Handler<CloudWatchLogsEvent, void>;

/**
 * The CloudWatchLogsEvent interface represents an event object that
 * is triggered by Amazon CloudWatch Logs. It contains a single property,
 * 'awslogs', which is of type CloudWatchLogsEventData.
 *
 * For more information, see:
 * http://docs.aws.amazon.com/lambda/latest/dg/eventsources.html#eventsources-cloudwatch-logs
 */
export interface CloudWatchLogsEvent {
    awslogs: CloudWatchLogsEventData;
}

/**
 * The CloudWatchLogsEventData interface represents the data contained
 * within the 'awslogs' property of a CloudWatchLogsEvent object.
 * It contains a single property, 'data', which is a base64-encoded string.
 */
export interface CloudWatchLogsEventData {
    data: string;
}

/**
 * The CloudWatchLogsDecodedData interface represents the decoded data
 * contained within the 'data' property of a CloudWatchLogsEventData object.
 * It contains several properties, including 'owner', 'logGroup', 'logStream',
 * 'subscriptionFilters', 'messageType', and 'logEvents'.
 */
export interface CloudWatchLogsDecodedData {
    owner: string;
    logGroup: string;
    logStream: string;
    subscriptionFilters: string[];
    messageType: string;
    logEvents: CloudWatchLogsLogEvent[];
}

/**
 * The CloudWatchLogsLogEventExtractedFields interface represents
 * the extracted fields contained within a CloudWatchLogsLogEvent object.
 * It is an indexable type that allows for the extraction of specific
 * fields from the 'message' property of a CloudWatchLogsLogEvent object.
 */
export interface CloudWatchLogsLogEventExtractedFields {
    [name: string]: string | undefined;
}

/**
 * The
