import type { RequestRequestOptions } from "./RequestRequestOptions";
import type { RequestHeaders } from "./RequestHeaders";
import type { Url } from "./Url";

/**
 * Parameters that can be passed into `request(route, parameters)` or `endpoint(route, parameters)` methods
 */
export type RequestParameters = {
    /**
     * Base URL to be used when a relative URL is passed, such as `/orgs/{org}`. <br/>
     * If `baseUrl` is `https://enterprise.acme-inc.com/api/v3`, then the request <br/>
     * will be sent to `https://enterprise.acme-inc.com/api/v3/orgs/{org}`.
     */
    baseUrl?: Url;

    /**
     * HTTP headers. Use lowercase keys.
     */
    headers?: RequestHeaders;

    /**
     * Media type options, see {@link https://developer.github.com/v3/media/|GitHub Developer Guide} <br/>
     * - `format`: `json` by default. Can be `raw`, `text`, `html`, `full`, `diff`, `patch`, `sha`, `base64`. Depending on endpoint
     * - `previews`: Custom media type names of {@link https://docs.github.com/en/graphql/overview/schema-previews|GraphQL API Previews} without the `-preview` suffix. <br/>
     *   Example for single preview: `['squirrel-girl']`. <br/>
     *   Example for multiple previews: `['squirrel-girl', 'mister-fantastic']`.
     */
    mediaType?: {
        format?: string;
        previews?: string[];
    };

    /**
     * Pass custom meta information for the request. The `request` object will be returned as is.
     */
    request?: RequestRequestOptions;

    /**
     * Any additional parameter will be passed as follows: <br/>
     * 1. URL parameter if `':parameter'` or `{parameter}` is part of `url` <br/>
     * 2. Query parameter if `method` is `'GET'` or `'HEAD'` <br/>
     * 3. Request body if `parameter` is `'data'` <br/>
     * 4. JSON in the request body in the form of `body[parameter]` unless `parameter` key is `'data'`
     */
    [parameter: string]: unknown;
};
