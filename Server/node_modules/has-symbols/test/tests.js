'use strict';

// This module exports a function that runs Symbol tests using the provided 't' object.
// The function performs various equality checks and property checks on the Symbol global object,
// Symbol instances, and objects with Symbol-valued properties.
module.exports = function runSymbolTests(t) {
	t.equal(typeof Symbol, 'function', 'global Symbol is a function'); // Check if Symbol is a function

	if (typeof Symbol !== 'function') { return false; } // Return false if Symbol is not a function

	t.notEqual(Symbol(), Symbol(), 'two symbols are not equal'); // Check if two symbols are not equal

	/*
	t.equal(
		Symbol.prototype.toString.call(Symbol('foo')),
		Symbol.prototype.toString.call(Symbol('foo')),
		'two symbols with the same description stringify the same'
	);
	*/

	/*
	var foo = Symbol('foo');

	t.notEqual(
		String(foo),
		String(Symbol('bar')),
		'two symbols with different descriptions do not stringify the same'
	);
	*/

	t.equal(typeof Symbol.prototype.toString, 'function', 'Symbol#toString is a function'); // Check if Symbol#toString is a function
	// t.equal(String(foo), Symbol.prototype.toString.call(foo), 'Symbol#toString equals String of the same symbol');

	t.equal(typeof Object.getOwnPropertySymbols, 'function', 'Object.getOwnPropertySymbols is a function'); // Check if Object.getOwnPropertySymbols is a function

	var obj = {}; // Initialize an empty object
	var sym = Symbol('test'); // Create a Symbol instance with a description
	var symObj = Object(sym); // Convert the Symbol instance to an object
	t.notEqual(typeof sym, 'string', 'Symbol is not a string'); // Check if Symbol is not a string
	t.equal(Object.prototype.toString.call(sym), '[object Symbol]', 'symbol primitive Object#toStrings properly'); // Check if the Symbol primitive's Object#toString method returns '[object Symbol]'
	t.equal(Object.prototype.toString.call(symObj), '[object Symbol]', 'symbol primitive Object#toStrings properly'); // Check if the Symbol object's Object#toString method returns '[object Symbol]'

	var symVal = 42; // Assign a value to the Symbol-valued property
	obj[sym] = symVal; // Add the Symbol-valued property to the object
	// eslint-disable-next-line no-restricted-syntax
	for (sym in obj) { t.fail('symbol property key was found in for..in of object'); } // Check if the symbol property key is not found in the for..in loop

	t.deepEqual(Object.keys(obj), [], 'no enumerable own keys on symbol-valued object'); // Check if there are no enumerable own keys on the symbol-valued object
	t.deepEqual(Object.getOwnPropertyNames(obj), [], 'no own names on symbol-valued object'); // Check if there are no own names on the symbol-valued object
	t.deepEqual(Object.getOwnPropertySymbols(obj), [sym], 'one own symbol on symbol-valued object'); // Check if there is one own symbol on the symbol-valued object
	t.equal(Object.prototype.property
