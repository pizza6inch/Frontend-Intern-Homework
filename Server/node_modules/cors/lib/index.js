// Import required modules
const assign = require('object-assign');
const vary = require('vary');

// Default options for the CORS middleware
const defaults = {
  origin: '*',
  methods: 'GET,HEAD,PUT,PATCH,POST,DELETE',
  preflightContinue: false,
  optionsSuccessStatus: 204
};

// Check if a value is a string
function isString(s) {
  return typeof s === 'string' || s instanceof String;
}

// Check if an origin is allowed based on the configured options
function isOriginAllowed(origin, allowedOrigin) {
  // ... implementation details
}

// Configure the 'Access-Control-Allow-Origin' header based on the request and the configured options
function configureOrigin(options, req) {
  // ... implementation details
}

// Configure the 'Access-Control-Allow-Methods' header based on the configured options
function configureMethods(options) {
  // ... implementation details
}

// Configure the 'Access-Control-Allow-Credentials' header based on the configured options
function configureCredentials(options) {
  // ... implementation details
}

// Configure the 'Access-Control-Allow-Headers' header based on the configured options and the request headers
function configureAllowedHeaders(options, req) {
  // ... implementation details
}

// Configure the 'Access-Control-Expose-Headers' header based on the configured options
function configureExposedHeaders(options) {
  // ... implementation details
}

// Configure the 'Access-Control-Max-Age' header based on the configured options
function configureMaxAge(options) {
  // ... implementation details
}

// Apply the configured headers to the response object
function applyHeaders(headers, res) {
  // ... implementation details
}

// The main CORS middleware function
function cors(options, req, res, next) {
  // ... implementation details
}

// Wrap the middleware function to support dynamic options based on the request object
function middlewareWrapper(o) {
  // ... implementation details
}

// Export the middleware function
module.exports = middlewareWrapper;
